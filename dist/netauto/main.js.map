{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/cfg-audit/cfg-audit.component.html","webpack:///./src/app/components/cfg-audit/cfg-audit.component.scss","webpack:///./src/app/components/cfg-audit/cfg-audit.component.ts","webpack:///./src/app/components/cfg-builder/cfg-builder.component.html","webpack:///./src/app/components/cfg-builder/cfg-builder.component.scss","webpack:///./src/app/components/cfg-builder/cfg-builder.component.ts","webpack:///./src/app/components/cfg-convertor/cfg-convertor.component.html","webpack:///./src/app/components/cfg-convertor/cfg-convertor.component.scss","webpack:///./src/app/components/cfg-convertor/cfg-convertor.component.ts","webpack:///./src/app/components/mat-dialog/mat-dialog.component.html","webpack:///./src/app/components/mat-dialog/mat-dialog.component.scss","webpack:///./src/app/components/mat-dialog/mat-dialog.component.ts","webpack:///./src/app/components/remote-cmd-executor/remote-cmd-executor.component.html","webpack:///./src/app/components/remote-cmd-executor/remote-cmd-executor.component.scss","webpack:///./src/app/components/remote-cmd-executor/remote-cmd-executor.component.ts","webpack:///./src/app/components/report-uf/report-uf.component.html","webpack:///./src/app/components/report-uf/report-uf.component.scss","webpack:///./src/app/components/report-uf/report-uf.component.ts","webpack:///./src/app/components/report/report.component.html","webpack:///./src/app/components/report/report.component.scss","webpack:///./src/app/components/report/report.component.ts","webpack:///./src/app/components/tcp-port-scanner/tcp-port-scanner.component.html","webpack:///./src/app/components/tcp-port-scanner/tcp-port-scanner.component.scss","webpack:///./src/app/components/tcp-port-scanner/tcp-port-scanner.component.ts","webpack:///./src/app/components/upgrade-firmware/upgrade-firmware.component.html","webpack:///./src/app/components/upgrade-firmware/upgrade-firmware.component.scss","webpack:///./src/app/components/upgrade-firmware/upgrade-firmware.component.ts","webpack:///./src/app/services/data.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<mat-toolbar>\\n  <img src=\\\"assets/images/Mphasis_Login.png\\\" alt=\\\"Mphasis\\\" style=\\\"height:40px;\\\" />\\n  <span class=\\\"toolbar-spacer\\\"></span>\\n  <span class=\\\"header\\\">Network Automation</span>\\n  <span class=\\\"toolbar-spacer\\\"></span>\\n  <span class=\\\"header\\\">{{username}}</span>\\n  <mat-icon class=\\\"toolbar-icon\\\">power_settings_new</mat-icon>\\n</mat-toolbar>\\n\\n<mat-tab-group enableAnimations=false (selectedTabChange)=\\\"onTabChange($event)\\\">\\n\\n  <mat-tab label=\\\"Configuration Convertor\\\">\\n    <app-cfg-convertor></app-cfg-convertor>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"Remote Commands Executor\\\">\\n    <app-remote-cmd-executor></app-remote-cmd-executor>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"Upgrade Firmware\\\">\\n    <app-upgrade-firmware></app-upgrade-firmware>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"Configuration Builder\\\">\\n    <app-cfg-builder></app-cfg-builder>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"Configuration Audit\\\">\\n    <app-cfg-audit></app-cfg-audit>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"Report\\\">\\n    <app-report></app-report>\\n  </mat-tab>\\n  <mat-tab label=\\\"Report UF\\\">\\n      <app-report-uf></app-report-uf>\\n    </mat-tab>\\n</mat-tab-group>\"","module.exports = \"html,\\nbody {\\n  margin: 0;\\n  height: 100vh;\\n  width: 100vw; }\\n\\n.toolbar-spacer {\\n  flex: 1 1 auto; }\\n\\n.toolbar-icon {\\n  padding: 0 14px; }\\n\\n.md-tabs.md-no-animation md-tab-content {\\n  transition: none; }\\n\\n.md-tabs.md-no-animation md-ink-bar {\\n  transition: none; }\\n\\n.mat-toolbar {\\n  background: linear-gradient(68deg, #673ab7, #74b7de);\\n  height: 50px; }\\n\\n.header {\\n  color: #ffffff; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvRDpcXDIwMjFcXG5ldHdvcmtfYXV0b21hdGlvblxcVVgvc3JjXFxhcHBcXGFwcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7RUFFRSxVQUFTO0VBQ1QsY0FBYTtFQUNiLGFBQVksRUFDYjs7QUFDRDtFQUNFLGVBQWMsRUFDZjs7QUFDRDtFQUNFLGdCQUFlLEVBQ2hCOztBQUVEO0VBQ0UsaUJBQWdCLEVBQ2pCOztBQUVEO0VBQ0UsaUJBQWdCLEVBQ2pCOztBQUVEO0VBQ0UscURBQW9EO0VBRXBELGFBQVksRUFDYjs7QUFFRDtFQUNFLGVBQWMsRUFDZiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImh0bWwsXG5ib2R5IHtcbiAgbWFyZ2luOiAwO1xuICBoZWlnaHQ6IDEwMHZoO1xuICB3aWR0aDogMTAwdnc7XG59XG4udG9vbGJhci1zcGFjZXIge1xuICBmbGV4OiAxIDEgYXV0bztcbn1cbi50b29sYmFyLWljb24ge1xuICBwYWRkaW5nOiAwIDE0cHg7XG59XG5cbi5tZC10YWJzLm1kLW5vLWFuaW1hdGlvbiBtZC10YWItY29udGVudCB7XG4gIHRyYW5zaXRpb246IG5vbmU7XG59XG5cbi5tZC10YWJzLm1kLW5vLWFuaW1hdGlvbiBtZC1pbmstYmFyIHtcbiAgdHJhbnNpdGlvbjogbm9uZTtcbn1cblxuLm1hdC10b29sYmFyIHtcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDY4ZGVnLCAjNjczYWI3LCAjNzRiN2RlKTsgXG4gIC8vIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg2OGRlZywgIzA4YWZlZiAsICNkNmYxZjkpO1xuICBoZWlnaHQ6IDUwcHg7XG59XG5cbi5oZWFkZXIge1xuICBjb2xvcjogI2ZmZmZmZjtcbn0iXX0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\nimport { ReportComponent } from './components/report/report.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'netauto';\n  username = \"not logged in \"\n  @ViewChild(ReportComponent)\n  reportComp: ReportComponent;\n  constructor(private http: HttpClient) { }\n  ngOnInit() {\n\n    this.http.get(\"http://127.0.0.1:5000/api/user\")\n      .subscribe((data: any) => {\n        this.username = data[\"username\"];\n\n      });\n  }\n\n  onTabChange(event){\n    console.log(event)\n    if(event.tab.textLabel==\"Report\")\n    {\n      this.reportComp.refreshbutton()\n    }\n\n  }\n\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { DataService } from './services/data.service';\nimport { CfgAuditComponent } from './components/cfg-audit/cfg-audit.component';\nimport { CfgBuilderComponent } from './components/cfg-builder/cfg-builder.component';\nimport { CfgConvertorComponent } from './components/cfg-convertor/cfg-convertor.component';\nimport { RemoteCmdExecutorComponent } from './components/remote-cmd-executor/remote-cmd-executor.component';\nimport { UpgradeFirmwareComponent } from './components/upgrade-firmware/upgrade-firmware.component';\nimport { TcpPortScannerComponent } from './components/tcp-port-scanner/tcp-port-scanner.component';\nimport { MatDialogComponent } from './components/mat-dialog/mat-dialog.component';\nimport { ReportComponent } from './components/report/report.component';\nimport { ReportUfComponent } from './components/report-uf/report-uf.component';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material';\nimport { MatCardModule } from '@angular/material/card';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatListModule } from '@angular/material/list';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatDialogModule } from '@angular/material';\nimport { MatStepperModule } from '@angular/material';\nimport { NgCircleProgressModule } from 'ng-circle-progress';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CfgConvertorComponent,\n    RemoteCmdExecutorComponent,\n    UpgradeFirmwareComponent,\n    TcpPortScannerComponent,\n    CfgAuditComponent,\n    CfgBuilderComponent,\n    MatDialogComponent,\n    ReportComponent,\n    ReportUfComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatFormFieldModule,\n    MatDialogModule,\n    MatIconModule,\n    MatInputModule,\n    MatCardModule,\n    FlexLayoutModule,\n    MatButtonModule,\n    MatTableModule,\n    MatStepperModule,\n    MatSelectModule,\n    MatTabsModule,\n    MatRadioModule,\n    MatCheckboxModule,\n    FormsModule,\n    HttpClientModule,\n    MatListModule,\n    ReactiveFormsModule,\n    MatTooltipModule,\n    NgCircleProgressModule.forRoot({\n      // set defaults here\n      radius: 100,\n      outerStrokeWidth: 16,\n      innerStrokeWidth: 8,\n      outerStrokeColor: \"#78C000\",\n      innerStrokeColor: \"#C7E596\",\n      animationDuration: 300\n\n    }),\n    MatProgressSpinnerModule\n  ],\n  entryComponents: [\n    MatDialogComponent\n  ],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n  ],\n  providers: [DataService, ReportComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<form [formGroup]=\\\"cfgAuditForm\\\">\\n<div style=\\\"margin:5px\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"5px\\\" fxLayoutAlign=\\\"center stretch\\\">\\n  <mat-card fxFlex=\\\"25\\\">\\n    <mat-card-title>IPs/Hostnames</mat-card-title>\\n    <mat-form-field style=\\\"width:100%;height:100%\\\" appearance=\\\"outline\\\">\\n      <textarea matInput [(ngModel)]=\\\"ip\\\" formControlName=\\\"IP_Hostname\\\" rows=\\\"10\\\"></textarea>\\n      <!-- <textarea matInput rows=\\\"10\\\">\\n            199.228.243.17\\n            172.20.7.36\\n            172.21.2.5\\n            172.16.100.12\\n            172.21.82.97\\n            172.16.151.106\\n            172.16.100.243\\n            40.121.38.118\\n      </textarea> -->\\n      <mat-error>IP/Hostname is required</mat-error>\\n    </mat-form-field>\\n  </mat-card>\\n\\n  <mat-card fxFlex=\\\"20\\\">\\n    <mat-card-title>Login Details</mat-card-title>\\n    <div class=\\\"form-container\\\">\\n\\n      <!-- <div class=\\\"form-padding\\\"> -->\\n        <mat-form-field appearance=\\\"outline\\\">\\n          <mat-label>Device</mat-label>\\n          <mat-select placeholder=\\\"Select\\\" formControlName=\\\"Device\\\" >\\n            <mat-option value=\\\"option\\\">Cisco </mat-option>\\n            <mat-option value=\\\"option\\\">HPE Comware</mat-option>\\n            <mat-option value=\\\"option\\\">HPE Procurve</mat-option>\\n            <mat-option value=\\\"option\\\">HPE Aruba</mat-option>\\n            <mat-option value=\\\"option\\\">Juniper</mat-option>\\n            <mat-option value=\\\"option\\\">Enterasys</mat-option>\\n            <mat-option value=\\\"option\\\">Brocade</mat-option>\\n            <mat-option value=\\\"option\\\">Alcatel Luscent</mat-option>\\n          </mat-select>\\n          <mat-error>Device is required</mat-error>\\n        </mat-form-field>\\n      <!-- </div>\\n      <div class=\\\"form-padding\\\"> -->\\n        <mat-form-field appearance=\\\"outline\\\">\\n          <mat-label>Device Type</mat-label>\\n          <mat-select placeholder=\\\"Select\\\" formControlName=\\\"DeviceType\\\" >\\n            <mat-option value=\\\"option\\\">Switch </mat-option>\\n            <mat-option value=\\\"option\\\">firewall</mat-option>\\n          </mat-select>\\n          <mat-error>Device Type is required</mat-error>\\n        </mat-form-field>\\n      <!-- </div>\\n      <div class=\\\"form-padding\\\"> -->\\n        <mat-form-field appearance=\\\"outline\\\">\\n          <mat-label>Username</mat-label>\\n          <input matInput formControlName=\\\"UserName\\\"/>\\n          <mat-error>UserName is required</mat-error>\\n        </mat-form-field>\\n      <!-- </div>\\n      <div class=\\\"form-padding\\\"> -->\\n        <mat-form-field appearance=\\\"outline\\\">\\n          <mat-label>Password</mat-label>\\n          <input matInput type=\\\"password\\\"  formControlName=\\\"Password\\\" name=\\\"targetPassword\\\" [type]=\\\"targetPasswordHide ? 'password' : 'text'\\\">\\n          <mat-icon matSuffix (click)=\\\"targetPasswordHide = !targetPasswordHide\\\">{{targetPasswordHide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n          <mat-error>Password is required</mat-error>\\n        </mat-form-field>\\n      <!-- </div> -->\\n      <!-- <div  >     \\n        <mat-radio-group layout=\\\"row\\\" >\\n            <mat-checkbox >Enable/Super</mat-checkbox>       \\n        </mat-radio-group>\\n      \\n        <mat-form-field>\\n            <input matInput placeholder=\\\"Password\\\" />\\n        </mat-form-field>\\n      </div>     \\n      <div class=\\\"form-padding\\\">   \\n          <mat-form-field>\\n              <input matInput placeholder=\\\"Level\\\" />\\n          </mat-form-field>  \\n      <mat-checkbox >Custom Pattern</mat-checkbox>\\n      </div> -->\\n      <div class=\\\"form-padding\\\">\\n        <button fxFlex=\\\"50\\\" mat-raised-button color=\\\"primary\\\" (click)=\\\"onclick()\\\">Analyze</button>\\n        <button fxFlex=\\\"50\\\" mat-raised-button class=\\\"button-row\\\" type=\\\"reset\\\" (click)=\\\"onClickReset()\\\" style=\\\"margin-left: 5px;\\\">\\n            Reset\\n        </button>\\n      </div>\\n      <span class=\\\"{{status}}\\\">{{ runStatus }}</span>\\n      \\n    </div>\\n  </mat-card>\\n  <!-- <mat-card fxFlex=\\\"25\\\">  \\n     <div>\\n        <mat-card>\\n            <mat-card-title>Custom Patterns</mat-card-title>\\n            <mat-card-title>Enter Good Patterns </mat-card-title>\\n      <mat-form-field style=\\\"width:100%;height:100%\\\" appearance=\\\"outline\\\">\\n          <textarea matInput  rows=\\\"10\\\"></textarea>\\n        </mat-form-field>\\n      </mat-card>\\n      <mat-card>\\n          <mat-card-title>Enter Bad Patterns </mat-card-title>\\n    <mat-form-field style=\\\"width:100%;height:100%\\\" appearance=\\\"outline\\\">\\n        <textarea matInput  rows=\\\"10\\\"></textarea>\\n      </mat-form-field>\\n    </mat-card>\\n        </div>\\n    </mat-card> -->\\n  <mat-card fxFlex=\\\"55\\\">\\n\\n\\n    <mat-card-title>\\n      Finding Summary \\n    </mat-card-title>\\n    <mat-form-field style=\\\"width:100%;height:100%\\\" appearance=\\\"outline\\\" *ngIf=\\\"running != true\\\">\\n      <textarea matInput rows=\\\"10\\\" readonly=\\\"true\\\">\\n      </textarea>\\n    </mat-form-field>\\n    <mat-table #table [dataSource]=\\\"dataSource\\\" matSort *ngIf=\\\"running == true\\\">\\n        <ng-container matColumnDef=\\\"ip\\\">\\n            <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n                IP\\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let element\\\">\\n              <div>{{element.ip}} </div>\\n            </mat-cell>\\n        </ng-container>\\n        <ng-container matColumnDef=\\\"finding\\\">\\n            <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n                Finding </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let element\\\">\\n                <div>{{element.finding}} </div>\\n            </mat-cell>\\n        </ng-container>\\n        <ng-container matColumnDef=\\\"download\\\">\\n            <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Download Full Report </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let element\\\">\\n                <a (click)=\\\"download()\\\" style=\\\"cursor:pointer;\\\"><mat-icon class=\\\"toolbar-icon\\\">cloud_download</mat-icon></a>\\n            </mat-cell>\\n        </ng-container>\\n\\n        <mat-header-row *matHeaderRowDef=\\\"['ip', 'finding', 'download']\\\"></mat-header-row>\\n        <div class=\\\"table-rows\\\">\\n            <mat-row *matRowDef=\\\"let row; columns: ['ip', 'finding', 'download']\\\"></mat-row>\\n        </div>\\n    </mat-table>\\n  </mat-card>\\n</div>\\n</form>\"","module.exports = \".template-body {\\n  border: 1px solid #dadada;\\n  border-radius: 5px;\\n  padding: 10px;\\n  margin: 10px 5px 0px 5px; }\\n\\n.template-body:hover {\\n  border: 1px solid black; }\\n\\n.mat-column-ip {\\n  flex: 10%; }\\n\\n.mat-column-finding {\\n  flex: 60%; }\\n\\n.mat-column-download {\\n  flex: 6%;\\n  text-align: center; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jZmctYXVkaXQvRDpcXDIwMjFcXG5ldHdvcmtfYXV0b21hdGlvblxcVVgvc3JjXFxhcHBcXGNvbXBvbmVudHNcXGNmZy1hdWRpdFxcY2ZnLWF1ZGl0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksMEJBQXlCO0VBQ3pCLG1CQUFrQjtFQUNsQixjQUFhO0VBQ2IseUJBQXdCLEVBQzNCOztBQUVEO0VBQ0ksd0JBQXVCLEVBQzFCOztBQUVEO0VBQ0ksVUFDSixFQUFDOztBQUVEO0VBQ0ksVUFDSixFQUFDOztBQUVEO0VBQ0ksU0FBUTtFQUNSLG1CQUFrQixFQUNyQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2ZnLWF1ZGl0L2NmZy1hdWRpdC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi50ZW1wbGF0ZS1ib2R5IHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGFkYWRhO1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIG1hcmdpbjogMTBweCA1cHggMHB4IDVweDtcbn1cblxuLnRlbXBsYXRlLWJvZHk6aG92ZXIge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xufVxuXG4ubWF0LWNvbHVtbi1pcHtcbiAgICBmbGV4OiAxMCVcbn1cblxuLm1hdC1jb2x1bW4tZmluZGluZ3tcbiAgICBmbGV4OiA2MCVcbn1cblxuLm1hdC1jb2x1bW4tZG93bmxvYWR7XG4gICAgZmxleDogNiU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource, MatSort } from '@angular/material';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { DataService } from './../../services/data.service';\n\n@Component({\n  selector: 'app-cfg-audit',\n  templateUrl: './cfg-audit.component.html',\n  styleUrls: ['./cfg-audit.component.scss']\n})\nexport class CfgAuditComponent implements OnInit {\n\n  dataSource: MatTableDataSource<any>;\n  running = false;\n  ip = '';\n  cfgAuditForm: FormGroup;\n  targetPasswordHide = true;\n  findings = [\n    {\n      id: 1,\n      ip: \"172.123.65.21\",\n      finding: \"This will be the finding for this IP\"\n    }, {\n      id: 2,\n      ip: \"171.423.68.56\",\n      finding: \"This will be the finding for this IP\"\n    }, {\n      id: 3,\n      ip: \"172.748.73.62\",\n      finding: \"This will be the finding for this IP\"\n    }, {\n      id: 4,\n      ip: \"177.847.84.21\",\n      finding: \"This will be the finding for this IP\"\n    }]\n  ipAddresses : any;\n  status = '';\n  runStatus = '';\n  constructor(private formBuilder: FormBuilder, private dataService: DataService) { }\n\n  ngOnInit() {\n\n    this.cfgAuditForm = this.formBuilder.group({\n      IP_Hostname: ['', [Validators.required]],\n      Device: ['', [Validators.required]],\n      UserName: ['', [Validators.required, Validators.maxLength(200)]],\n      Password: ['', [Validators.required, Validators.maxLength(200)]],\n      DeviceType: ['', [Validators.required]],\n    });\n\n    this.dataSource = new MatTableDataSource<any>(this.findings);\n    var nextLine = '\\n';\n    this.findings.forEach((element, index) => {\n      this.ip = this.ip + element.ip + nextLine;\n      if(index == this.findings.length-2){\n        nextLine = '';\n      }\n    })\n  }\n\n  onclick() {\n    if (this.cfgAuditForm.invalid) {\n      return;\n    }\n    this.ipAddresses = this.ip.split(/\\n/);\n    this.ipAddresses.forEach((element, index) => {\n      if (this.findings[index] == null) {\n        this.findings.push({\n          id: index,\n          ip: element,\n          finding : \"This will be the finding for this ip\"\n        })\n      } else {\n        this.findings[index].ip = element;\n      }      \n  })\n  if(this.ipAddresses.length < this.findings.length) {\n    for(var index = this.ipAddresses.length; index < this.findings.length; index++) {\n      this.findings[index].ip = '';\n    }\n  }\n    var finalFindings = [];\n    this.findings.forEach((element) => {\n      if (element.ip != '') {\n        finalFindings.push(element);\n      }\n    });\n    this.findings = finalFindings;\n    this.status = '';\n    setTimeout(() => {  \n      this.running = true;\n      this.dataSource = new MatTableDataSource<any>(this.findings); \n      this.status = \"Success\";\n      this.runStatus = \"Executed Successfully\"\n      var flag = false, index = 0;\n      this.dataService.report.forEach((element, elementIndex)=> {\n        if(element.name == 'Remote Commands Executor') {\n          flag = true;\n          index = elementIndex;\n        }\n      })\n      if(flag) {\n        this.dataService[index].runBy = this.cfgAuditForm.controls['UserName'].value;\n        this.dataService.report[index].lastRunDate = new Date();\n        this.dataService.report[index].status = this.status;\n        this.ipAddresses.forEach(element=> {\n          this.dataService.report[index].details.push({\n            ip: element,\n            log: \"This.wil be the log for \" + element\n          })\n        })\n      } else {\n        this.dataService.report.push({\n          id : this.dataService.report.length + 1,\n          name: \"Configuration Audit\",\n          description: \"This will be the description for Configuration Audit\",\n          createdDate: new Date(),\n          commands : [],\n          details: [],\n          lastRunDate: new Date(),\n          runBy: this.cfgAuditForm.controls['UserName'].value,\n          status : this.status\n        })\n        this.ipAddresses.forEach(element=> {\n          this.dataService.report[this.dataService.report.length-1].details.push({\n            ip: element,\n            log: \"This.wil be the log for \" + element\n          })\n        })\n      }  \n    }, 2000);  \n  }\n\n  download() {\n    let link = document.createElement(\"a\");\n    link.download = \"filename\";\n    link.href = \"assets/doc/config_audit.txt\";\n    link.click();\n  }\n\n  onClickReset() {\n    this.running = false;\n  }\n\n}\n","module.exports = \"<div style=\\\"margin:5px\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"5px\\\" fxLayoutAlign=\\\"center stretch\\\">\\n    <!-- <mat-card fxFlex=\\\"20\\\">\\n        <div class=\\\"form-container\\\">\\n            <mat-form-field appearance=\\\"outline\\\">\\n                <mat-label>Device</mat-label>\\n                <mat-select placeholder=\\\"Select\\\">\\n                    <mat-option value=\\\"option\\\">Cisco </mat-option>\\n                    <mat-option value=\\\"option\\\">ProVision</mat-option>\\n                    <mat-option value=\\\"option\\\">HPE Comware</mat-option>\\n                    <mat-option value=\\\"option\\\">HPE Procurve</mat-option>\\n                    <mat-option value=\\\"option\\\">HPE Aruba</mat-option>\\n                    <mat-option value=\\\"option\\\">Juniper</mat-option>\\n                    <mat-option value=\\\"option\\\">Enterasys</mat-option>\\n                    <mat-option value=\\\"option\\\">Brocade</mat-option>\\n                    <mat-option value=\\\"option\\\">Alcatel Luscent</mat-option>\\n                </mat-select>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\">\\n                <mat-label>Category</mat-label>\\n                <mat-select placeholder=\\\"Select\\\">\\n                    <mat-option value=\\\"option\\\">Basic Switch Management </mat-option>\\n                    <mat-option value=\\\"option\\\">Switch User ID and Password</mat-option>\\n                    <mat-option value=\\\"option\\\">Syslog Services</mat-option>\\n                    <mat-option value=\\\"option\\\">Time Service</mat-option>\\n                    <mat-option value=\\\"option\\\">SNMP</mat-option>\\n                    <mat-option value=\\\"option\\\">SSH</mat-option>\\n                    <mat-option value=\\\"option\\\">SSL</mat-option>\\n                    <mat-option value=\\\"option\\\">RADIUS Authentication for Switch Management</mat-option>\\n                    <mat-option value=\\\"option\\\">TACACS Authentication for Switch Management</mat-option>\\n                </mat-select>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\">\\n                <mat-label>SubCategory</mat-label>\\n                <mat-select placeholder=\\\"Select\\\">\\n                    <mat-option value=\\\"option\\\">Management Access </mat-option>\\n                    <mat-option value=\\\"option\\\">Configuration Access</mat-option>\\n                    <mat-option value=\\\"option\\\">Console Access—Baud Rate</mat-option>\\n                    <mat-option value=\\\"option\\\">Console Access—Timeout</mat-option>\\n                    <mat-option value=\\\"option\\\">Reload</mat-option>\\n                    <mat-option value=\\\"option\\\">USB Interface</mat-option>\\n                    <mat-option value=\\\"option\\\">System and Environment</mat-option>\\n                    <mat-option value=\\\"option\\\">Remote Management Sessions—Viewing</mat-option>\\n                </mat-select>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\">\\n                <mat-label>Select baud-rate</mat-label>\\n                <mat-select placeholder=\\\"Select\\\">\\n                    <mat-option value=\\\"speed-sense\\\">speed-sense</mat-option>\\n                    <mat-option value=\\\"1200\\\">1200</mat-option>\\n                    <mat-option value=\\\"2400\\\">2400</mat-option>\\n                    <mat-option value=\\\"4800\\\">4800</mat-option>\\n                    <mat-option value=\\\"9600\\\">9600</mat-option>\\n                    <mat-option value=\\\"19200\\\">19200</mat-option>\\n                    <mat-option value=\\\"38400\\\">38400</mat-option>\\n                    <mat-option value=\\\"57600\\\">57600</mat-option>\\n                    <mat-option value=\\\"115200\\\">115200</mat-option>\\n                </mat-select>\\n            </mat-form-field>\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onclick($event)\\\">Add</button>\\n        </div>\\n    </mat-card> -->\\n\\n    <!-- Chetan's Code -->\\n    <mat-card fxFlex=\\\"100\\\">\\n        <mat-card-title>Configuration</mat-card-title>\\n        <form [formGroup]=\\\"configurationFormGroup\\\">\\n            <mat-horizontal-stepper [linear]=\\\"true\\\" #stepper>\\n                <mat-step [stepControl]=\\\"configurationFormGroup.controls['template']\\\">\\n                    <!-- <form> -->\\n                    <ng-template matStepLabel>Select Template</ng-template>\\n                    <div>\\n                        <mat-table #table [dataSource]=\\\"dataSource\\\" matSort>\\n                            <ng-container matColumnDef=\\\"name\\\">\\n                                <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n                                    Template\\n                                    Name\\n                                </mat-header-cell>\\n                                <mat-cell *matCellDef=\\\"let element; let templateIndex = index\\\">\\n                                    <ng-container formArrayName=\\\"template\\\">\\n                                        <ng-container [formGroupName]=\\\"templateIndex\\\">\\n                                            <mat-checkbox formControlName=\\\"templateChecked\\\" [(ngModel)]=\\\"element.checked\\\"\\n                                                [ngModelOptions]=\\\"{standalone: true}\\\" [checked]=\\\"element.checked\\\">{{element.name}}</mat-checkbox>\\n                                        </ng-container>\\n                                    </ng-container>\\n                                </mat-cell>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"description\\\">\\n                                <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n                                    Description </mat-header-cell>\\n                                <mat-cell *matCellDef=\\\"let element\\\">\\n                                    <div>{{element.description}} </div>\\n                                </mat-cell>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"createdDate\\\">\\n                                <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Created\\n                                    Date </mat-header-cell>\\n                                <mat-cell *matCellDef=\\\"let element\\\">\\n                                    <div>{{element.createdDate | date: 'MM-dd-yyyy hh:mm:ss aa'}} </div>\\n                                </mat-cell>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"lastRunDate\\\">\\n                                <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Last\\n                                    Run Date </mat-header-cell>\\n                                <mat-cell *matCellDef=\\\"let element\\\">\\n                                    <div>{{element.lastRunDate | date: 'MM-dd-yyyy hh:mm:ss aa'}} </div>\\n                                </mat-cell>\\n                            </ng-container>\\n\\n                            <mat-header-row *matHeaderRowDef=\\\"['name', 'description', 'createdDate', 'lastRunDate']\\\"></mat-header-row>\\n                            <div class=\\\"table-rows\\\">\\n                                <mat-row *matRowDef=\\\"let row; columns: ['name', 'description', 'createdDate', 'lastRunDate']\\\"></mat-row>\\n                            </div>\\n                        </mat-table>\\n                        <!-- </div> -->\\n                    </div>\\n                    <div style=\\\"float:right\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" matStepperNext>Skip</button>\\n                        <button mat-raised-button color=\\\"primary\\\" matStepperNext>Next</button>\\n                    </div>\\n                    <!-- </form> -->\\n                </mat-step>\\n                <mat-step [stepControl]=\\\"configurationFormGroup.controls['provider']\\\">\\n                    <ng-template matStepLabel>Custom Configuration</ng-template>\\n                    <div fxLayout=\\\"row\\\">\\n                        <div fxFlex=\\\"50\\\">\\n                            <div class=\\\"template-header\\\">Selected Templates</div>\\n                            <div class=\\\"template-body\\\">\\n                                <mat-list>\\n                                    <div class=\\\"template-content\\\" *ngFor=\\\"let template of templates; let i = index\\\">\\n                                        <div [hidden]=\\\"!template.checked\\\">\\n                                            <mat-list-item>{{template.name}} : {{template.description}} </mat-list-item>\\n                                        </div>\\n                                    </div>\\n                                </mat-list>\\n                            </div>\\n                        </div>\\n                        <div fxFlex=\\\"50\\\">\\n                            <div class=\\\"template-header\\\">Customise</div>\\n                            <div class=\\\"form-container\\\">\\n                                <mat-form-field appearance=\\\"outline\\\">\\n                                    <mat-label>Source techonology provider</mat-label>\\n                                    <mat-select placeholder=\\\"Provider\\\" formControlName=\\\"provider\\\" [(ngModel)]=\\\"provider\\\"\\n                                        (selectionChange)=\\\"assignConfigurationForm()\\\">\\n                                        <mat-option value=\\\"Cisco\\\">Cisco </mat-option>\\n                                        <mat-option value=\\\"HPE Comware\\\">HPE Comware</mat-option>\\n                                        <mat-option value=\\\"ProVision\\\">ProVision</mat-option>\\n                                        <mat-option value=\\\"HPE Procurve\\\" disabled>HPE Procurve</mat-option>\\n                                        <mat-option value=\\\"HPE Aruba\\\" disabled>HPE Aruba</mat-option>\\n                                        <mat-option value=\\\"Juniper\\\" disabled>Juniper</mat-option>\\n                                        <mat-option value=\\\"Enterasys\\\" disabled>Enterasys</mat-option>\\n                                        <mat-option value=\\\"Brocade\\\" disabled>Brocade</mat-option>\\n                                        <mat-option value=\\\"Alcatel Luscent\\\" disabled>Alcatel Luscent</mat-option>\\n                                    </mat-select>\\n                                    <mat-error>Source techonology provider is required</mat-error>\\n                                </mat-form-field>\\n                            </div>\\n                            <div class=\\\"template-body\\\">\\n                                <div *ngFor=\\\"let item of customBuild; let parentIndex = index;\\\">\\n                                    <ng-container formArrayName=\\\"customParent\\\">\\n                                        <ng-container [formGroupName]=\\\"parentIndex\\\">\\n                                            <mat-checkbox formControlName=\\\"parent\\\" [(ngModel)]=\\\"item.checked\\\" [checked]=\\\"item.checked\\\">{{item.parent}}</mat-checkbox>\\n                                            <div *ngIf=\\\"item.checked\\\" style=\\\"margin-left: 50px;\\\">\\n                                                <div *ngFor=\\\"let child of item.child; let childIndex = index;\\\">\\n                                                    <ng-container formArrayName=\\\"customChild\\\">\\n                                                        <ng-container [formGroupName]=\\\"childIndex\\\">\\n                                                            <mat-checkbox formControlName=\\\"child\\\" [(ngModel)]=\\\"child.checked\\\"\\n                                                                [checked]=\\\"child.checked\\\" (change)=\\\"assignParametersForm()\\\">{{child.name}}</mat-checkbox>\\n                                                        </ng-container>\\n                                                    </ng-container>\\n                                                </div>\\n                                            </div>\\n                                        </ng-container>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div style=\\\"float:right\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" matStepperPrevious>Previous</button>\\n                        <button mat-raised-button color=\\\"primary\\\" matStepperNext>Skip</button>\\n                        <button mat-raised-button color=\\\"primary\\\" matStepperNext>Next</button>\\n                    </div>\\n                </mat-step>\\n                <mat-step [stepControl]=\\\"configurationFormGroup.controls['customParent']\\\">\\n                    <ng-template matStepLabel>Define Parameters</ng-template>\\n                    <!-- {{configurationFormGroup.controls['customParent'].valid}} -->\\n                    <div>\\n                        <ng-container *ngFor=\\\"let parent of customBuild; let parentIndex = index;\\\">\\n                            <ng-container formArrayName=\\\"customParent\\\">\\n                                <ng-container [formGroupName]=\\\"parentIndex\\\">\\n                                    <ng-container *ngFor=\\\"let child of parent.child; let childIndex = index;\\\">\\n                                        <ng-container formArrayName=\\\"customChild\\\">\\n                                            <ng-container [formGroupName]=\\\"childIndex\\\">\\n                                                <div *ngIf=\\\"child.checked\\\" fxLayout=\\\"row\\\">\\n                                                    <ng-container *ngFor=\\\"let providerData of child.technologyProvider; let providerIndex = index;\\\">\\n                                                        <ng-container *ngIf=\\\"providerData.name == provider\\\">\\n                                                                <div fxFlex=\\\"20\\\" *ngIf=\\\"providerData.parameter.length != 0\\\" class=\\\"parameter-name\\\">{{child.name}}  </div>\\n                                                            <ng-container *ngFor=\\\"let parameter of providerData.parameter; let parameterIndex = index\\\">\\n                                                                <ng-container formArrayName=\\\"parameters\\\">\\n                                                                    <ng-container [formGroupName]=\\\"parameterIndex\\\">\\n                                                                        <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"20\\\" style=\\\"margin-left:5px\\\" *ngIf=\\\"parameter.name != 'Password'\\\">\\n                                                                            <mat-label>{{parameter.name}}</mat-label>\\n                                                                            <input matInput [(ngModel)]=\\\"parameter.value\\\"\\n                                                                                formControlName=\\\"parameterValue\\\"\\n                                                                                required />\\n                                                                            <mat-error>{{parameter.name}} is required</mat-error>\\n                                                                        </mat-form-field>\\n                                                                        <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"20\\\" style=\\\"margin-left:5px\\\" *ngIf=\\\"parameter.name == 'Password'\\\">\\n                                                                            <mat-label>{{parameter.name}}</mat-label>\\n                                                                            <input matInput [(ngModel)]=\\\"parameter.value\\\" type=\\\"password\\\"\\n                                                                                formControlName=\\\"parameterValue\\\"\\n                                                                                required />\\n                                                                            <mat-error>{{parameter.name}} is required</mat-error>\\n                                                                        </mat-form-field>\\n                                                                    </ng-container>\\n                                                                </ng-container>\\n                                                            </ng-container>\\n                                                        </ng-container>\\n                                                    </ng-container>\\n                                                </div>\\n                                            </ng-container>\\n                                        </ng-container>\\n                                    </ng-container>\\n                                </ng-container>\\n                            </ng-container>\\n                        </ng-container>\\n                    </div>\\n                    <div style=\\\"float:right\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" matStepperPrevious>Previous</button>\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"setOutputCommands()\\\" matStepperNext>Next</button>\\n                    </div>\\n                    <!-- </form> -->\\n                </mat-step>\\n                <mat-step (click)=\\\"setOutputCommands()\\\">\\n                    <ng-template matStepLabel>Run and Results</ng-template>\\n                    <div fxLayout=\\\"row\\\">\\n                        <div fxFlex=\\\"50\\\" style=\\\"margin-right: 5px;\\\">\\n                            <div class=\\\"template-header\\\">Output Commands</div>\\n                            <mat-form-field style=\\\"width:100%;height:100%;margin-top: 5px;\\\" placeholder=\\\"Output\\\"\\n                                appearance=\\\"outline\\\">\\n                                <textarea matInput rows=\\\"20\\\" readonly=\\\"true\\\" formControlName=\\\"OutputCommand\\\" [(ngModel)]=\\\"outputCommand\\\"></textarea>\\n                            </mat-form-field>\\n                            <!-- <div class=\\\"template-body\\\"> <mat-list-item *ngFor=\\\"let item of output;let i = index\\\">{{item}}</mat-list-item> </div>-->\\n                        </div>\\n                        <div fxFlex=\\\"50\\\">\\n                            <div class=\\\"template-header\\\">Target IPs</div>\\n                                <mat-form-field style=\\\"width:100%;height:100%;margin-top: 5px;\\\" appearance=\\\"outline\\\"\\n                                    *ngIf=\\\"running==false\\\">\\n                                    <textarea matInput rows=\\\"10\\\" [(ngModel)]=\\\"ip\\\" [ngModelOptions]=\\\"{standalone: true}\\\" (keyup)=\\\"setIp()\\\" \\n                                    (keydown)=\\\"setIp()\\\" formControlname=\\\"IP_Hostname\\\" required minlength=\\\"1\\\" maxlength=\\\"1000\\\"></textarea>\\n                                    <mat-error *ngIf=\\\"configurationFormGroup.controls['IP_Hostname'].hasError('required')\\\">IP/Hostname is required</mat-error>\\n                                </mat-form-field>\\n                                <div class=\\\"template-body\\\" *ngIf=\\\"running!=false\\\">\\n                                    <mat-list>\\n                                        <mat-list-item *ngFor=\\\"let ipaddress of ipAddresses;let i = index\\\"\\n                                            typeahead-wait-ms=\\\"1000\\\">\\n                                            <circle-progress [percent]=\\\"progress\\\" [radius]=\\\"20\\\" [outerStrokeWidth]=\\\"5\\\"\\n                                                [innerStrokeWidth]=\\\"0\\\" [outerStrokeColor]=\\\"'#78C000'\\\"\\n                                                [innerStrokeColor]=\\\"'#C7E596'\\\" [animation]=\\\"true\\\" [animationDuration]=\\\"(1+i%5)*3000\\\"\\n                                                [titleFontSize]=\\\"10\\\" [showSubtitle]=\\\"false\\\"></circle-progress>\\n                                            <h4 mat-line>{{ipaddress}}</h4>\\n                                        </mat-list-item>\\n                                    </mat-list>\\n                                \\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div style=\\\"float:right\\\">\\n                        <span style=\\\"color:green; font-size: 16px;\\\">{{ runStatus }}</span>\\n                        <button mat-raised-button color=\\\"primary\\\" class=\\\"button-row\\\" (click)=\\\"run()\\\" [disabled]=\\\"running\\\">Run</button>\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"openModal()\\\">Save as template</button>\\n                        <button mat-raised-button color=\\\"primary\\\" matStepperPrevious>Previous</button>\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onclickReset(); stepper.reset();\\\">Exit</button>\\n                    </div>\\n                </mat-step>\\n            </mat-horizontal-stepper>\\n        </form>\\n        <!-- <mat-form-field style=\\\"width:100%;height:100%\\\" appearance=\\\"outline\\\">\\n            <textarea matInput rows=\\\"20\\\" [(ngModel)]=\\\"textValue\\\"></textarea>\\n        </mat-form-field> -->\\n        <!-- <mat-tab-group #tabGroup enableAnimations=false (focusChange)=\\\"updateTabIndex($event)\\\" [selectedIndex]=\\\"selectedTabIndex\\\">\\n            <mat-tab label=\\\"Select Template\\\">\\n                <div class=\\\"template-body\\\">\\n                    <div>\\n                        <mat-table #table [dataSource]=\\\"dataSource\\\" matSort>\\n                            <ng-container matColumnDef=\\\"name\\\">\\n                                <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Template Name\\n                                </mat-header-cell>\\n                                <mat-cell *matCellDef=\\\"let element\\\">\\n                                    <mat-checkbox [(ngModel)]=\\\"element.checked\\\" [checked]=\\\"element.checked\\\">{{element.name}}</mat-checkbox>\\n                                </mat-cell>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"description\\\">\\n                                <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n                                    Description </mat-header-cell>\\n                                <mat-cell *matCellDef=\\\"let element\\\">\\n                                    <div>{{element.description}} </div>\\n                                </mat-cell>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"createdDate\\\">\\n                                <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Created\\n                                    Date </mat-header-cell>\\n                                <mat-cell *matCellDef=\\\"let element\\\">\\n                                    <div>{{element.createdDate}} </div>\\n                                </mat-cell>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"lastRunDate\\\">\\n                                <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Last\\n                                    Run Date </mat-header-cell>\\n                                <mat-cell *matCellDef=\\\"let element\\\">\\n                                    <div>{{element.lastRunDate}} </div>\\n                                </mat-cell>\\n                            </ng-container>\\n\\n                            <mat-header-row *matHeaderRowDef=\\\"['name', 'description', 'createdDate', 'lastRunDate']\\\"></mat-header-row>\\n                            <div class=\\\"table-rows\\\">\\n                                <mat-row *matRowDef=\\\"let row; columns: ['name', 'description', 'createdDate', 'lastRunDate']\\\"></mat-row>\\n                            </div>\\n                        </mat-table>\\n                    </div>\\n                </div>\\n                <div style=\\\"float:right\\\">\\n                    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"nextTab()\\\">Skip</button>\\n                    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"nextTab()\\\">Next</button>\\n                </div>\\n            </mat-tab>\\n\\n            <mat-tab label=\\\"Custom Configuration\\\" [disabled]=\\\"selectedTabIndex<1\\\">\\n                <div fxLayout=\\\"row\\\">\\n                    <div fxFlex=\\\"50\\\">\\n                        <div class=\\\"template-header\\\">Selected Templates</div>\\n                        <div class=\\\"template-body\\\">\\n                            <mat-list>\\n                            <div class=\\\"template-content\\\" *ngFor=\\\"let template of templates; let i = index\\\">\\n                                <div [hidden]=\\\"!template.checked\\\"><mat-list-item>{{template.name}} : {{template.description}} </mat-list-item></div>\\n                            </div>\\n                            </mat-list>\\n                        </div>\\n                    </div>\\n                    <div fxFlex=\\\"50\\\">\\n                        <div class=\\\"template-header\\\">Custom Configuration</div>\\n                        <div class=\\\"template-body\\\">\\n                        <div *ngFor=\\\"let item of customBuild\\\">\\n                            <mat-checkbox [(ngModel)]=\\\"item.checked\\\" [checked]=\\\"item.checked\\\">{{item.parent}}</mat-checkbox>\\n                            <div *ngIf=\\\"item.checked\\\" style=\\\"margin-left: 50px;\\\">\\n                                <div *ngFor=\\\"let child of item.child\\\">\\n                                    <mat-checkbox [(ngModel)]=\\\"child.checked\\\" [checked]=\\\"child.checked\\\">{{child.name}}</mat-checkbox>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div style=\\\"float:right\\\">\\n                    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"previousTab()\\\">Previous</button>\\n                    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"nextTab()\\\">Skip</button>\\n                    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"nextTab()\\\">Next</button>\\n                </div>\\n            </mat-tab>\\n\\n            <mat-tab label=\\\"Define Parameters\\\" [disabled]=\\\"selectedTabIndex<2\\\">\\n                <div>\\n                    <ng-container *ngFor=\\\"let parent of customBuild\\\" >\\n                        <ng-container *ngFor=\\\"let child of parent.child\\\">\\n                            <ng-container *ngIf=\\\"child.checked\\\">\\n                                <ng-container *ngFor=\\\"let parameter of child.parameter\\\">\\n                                    <mat-form-field appearance=\\\"outline\\\" style=\\\"width: 300px;margin:5px;\\\">\\n                                        <mat-label>{{parameter.name}}</mat-label>\\n                                        <input matInput [(ngModel)]=\\\"parameter.value\\\" required />\\n                                        <mat-error>{{parameter.name}} is required</mat-error>\\n                                    </mat-form-field>\\n                                </ng-container>\\n                            </ng-container>\\n                        </ng-container>\\n                    </ng-container>\\n                </div>\\n                <div style=\\\"float:right\\\">\\n                    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"previousTab()\\\">Previous</button>\\n                    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"nextTab()\\\">Next</button>\\n                </div>\\n            </mat-tab>\\n\\n            <mat-tab label=\\\"Run and Results\\\" [disabled]=\\\"selectedTabIndex<3\\\">\\n                <div fxLayout=\\\"row\\\">\\n                    <div fxFlex=\\\"40\\\" style=\\\"margin-right: 5px;\\\">\\n                        <div class=\\\"template-header\\\">Selected Commands</div>\\n                        <mat-form-field style=\\\"width:100%;height:100%;margin-top: 5px;\\\" placeholder=\\\"Output\\\" appearance=\\\"outline\\\">\\n                            <textarea matInput rows=\\\"10\\\" readonly=\\\"true\\\">\\n                                Sample Commands\\n                                Command 1 IP Address Port\\n                                Show Command\\n                                Execute Command\\n                                Save Command\\n                                Exit\\n                            </textarea>\\n                        </mat-form-field>\\n                        <div class=\\\"template-body\\\"> <mat-list-item *ngFor=\\\"let item of output;let i = index\\\">{{item}}</mat-list-item> </div>\\n                    </div>\\n                    <div fxFlex=\\\"40\\\">\\n                        <div class=\\\"template-header\\\">Target IPs</div>\\n                        <div>\\n                    <mat-form-field style=\\\"width:100%;height:100%;margin-top: 5px;\\\" appearance=\\\"outline\\\" *ngIf=\\\"running==false\\\">\\n                        <textarea matInput rows=\\\"10\\\">\\n                                199.228.243.17\\n                                172.20.7.36\\n                                172.21.2.5\\n                                172.16.100.12\\n                                172.21.82.97\\n                                172.16.151.106\\n                                172.16.100.243\\n                                40.121.38.118\\n                            </textarea>\\n                    </mat-form-field>\\n                    <div class=\\\"template-body\\\" *ngIf=\\\"running!=false\\\">\\n                        <mat-list>\\n                            <mat-list-item *ngFor=\\\"let ipaddress of ipAddresses;let i = index\\\" typeahead-wait-ms=\\\"1000\\\">\\n                                <circle-progress [percent]=\\\"progress\\\" [radius]=\\\"20\\\" [outerStrokeWidth]=\\\"5\\\"\\n                                    [innerStrokeWidth]=\\\"0\\\" [outerStrokeColor]=\\\"'#78C000'\\\" [innerStrokeColor]=\\\"'#C7E596'\\\"\\n                                    [animation]=\\\"true\\\" [animationDuration]=\\\"(1+i%5)*3000\\\" [titleFontSize]=\\\"10\\\"\\n                                    [showSubtitle]=\\\"false\\\"></circle-progress>\\n                                <h4 mat-line>{{ipaddress}}</h4>\\n                            </mat-list-item>\\n                        </mat-list>\\n                    </div>\\n                    </div>\\n                    </div>\\n                    <div fxFlex=\\\"20\\\" style=\\\"margin-top: 25px;\\\">\\n                        <div>\\n                            <button mat-raised-button color=\\\"primary\\\" class=\\\"button-row\\\" (click)=\\\"run()\\\" [disabled]=\\\"running\\\">Run</button>\\n                        </div>\\n                        <div><button mat-raised-button color=\\\"primary\\\" (click)=\\\"openModal()\\\">Save as template</button></div>\\n                        <div>\\n                            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"previousTab()\\\">Previous</button>\\n                            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onclickReset()\\\">Exit</button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </mat-tab>\\n\\n        </mat-tab-group> -->\\n    </mat-card>\\n    <!-- End of Chetan's Code -->\\n\\n</div>\"","module.exports = \".md-tabs.md-no-animation md-tab-content {\\n  transition: none; }\\n\\n.md-tabs.md-no-animation md-ink-bar {\\n  transition: none; }\\n\\n::ng-deep .mat-tab-body-content {\\n  overflow: hidden !important; }\\n\\n.template-body {\\n  border: 1px solid #dadada;\\n  border-radius: 5px;\\n  padding: 10px;\\n  margin: 10px 5px 0px 5px;\\n  min-height: 150px; }\\n\\n.template-body:hover {\\n  border: 1px solid black; }\\n\\n.mat-raised-button {\\n  margin: 10px 5px 0 5px; }\\n\\n.mat-column-name {\\n  flex: 10%; }\\n\\n.mat-column-description {\\n  flex: 27%; }\\n\\n.mat-column-lastRunDate {\\n  flex: 0%; }\\n\\n.mat-column-createdDate {\\n  flex: 0%; }\\n\\n.template-header {\\n  font-weight: bold;\\n  padding: 7px 0 0 7px; }\\n\\n.form-container {\\n  margin-top: 5px; }\\n\\n.parameter-name {\\n  font-weight: bold;\\n  margin-top: 20px; }\\n\\n.parameter-value {\\n  width: 200px;\\n  margin: 5px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jZmctYnVpbGRlci9EOlxcMjAyMVxcbmV0d29ya19hdXRvbWF0aW9uXFxVWC9zcmNcXGFwcFxcY29tcG9uZW50c1xcY2ZnLWJ1aWxkZXJcXGNmZy1idWlsZGVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksaUJBQWdCLEVBQ25COztBQUVEO0VBQ0ksaUJBQWdCLEVBQ25COztBQUVEO0VBQ0ksNEJBQTJCLEVBQzlCOztBQUVEO0VBQ0ksMEJBQXlCO0VBQ3pCLG1CQUFrQjtFQUNsQixjQUFhO0VBQ2IseUJBQXdCO0VBQ3hCLGtCQUFpQixFQUNwQjs7QUFFRDtFQUNJLHdCQUF1QixFQUMxQjs7QUFFRDtFQUNJLHVCQUFzQixFQUN6Qjs7QUFFRDtFQUNJLFVBQVMsRUFDWjs7QUFFRDtFQUNJLFVBQVMsRUFDWjs7QUFFRDtFQUNJLFNBQVEsRUFDWDs7QUFFRDtFQUNJLFNBQVEsRUFDWDs7QUFFRDtFQUNJLGtCQUFpQjtFQUNqQixxQkFBb0IsRUFDdkI7O0FBRUQ7RUFDSSxnQkFBZSxFQUNsQjs7QUFFRDtFQUNJLGtCQUFpQjtFQUNqQixpQkFBZ0IsRUFDbkI7O0FBRUQ7RUFDSSxhQUFZO0VBQ1osWUFBVSxFQUNiIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9jZmctYnVpbGRlci9jZmctYnVpbGRlci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tZC10YWJzLm1kLW5vLWFuaW1hdGlvbiBtZC10YWItY29udGVudCB7XG4gICAgdHJhbnNpdGlvbjogbm9uZTtcbn1cblxuLm1kLXRhYnMubWQtbm8tYW5pbWF0aW9uIG1kLWluay1iYXIge1xuICAgIHRyYW5zaXRpb246IG5vbmU7XG59XG5cbjo6bmctZGVlcCAubWF0LXRhYi1ib2R5LWNvbnRlbnQge1xuICAgIG92ZXJmbG93OiBoaWRkZW4gIWltcG9ydGFudDtcbn1cblxuLnRlbXBsYXRlLWJvZHkge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkYWRhZGE7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgbWFyZ2luOiAxMHB4IDVweCAwcHggNXB4O1xuICAgIG1pbi1oZWlnaHQ6IDE1MHB4O1xufVxuXG4udGVtcGxhdGUtYm9keTpob3ZlciB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG59XG5cbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XG4gICAgbWFyZ2luOiAxMHB4IDVweCAwIDVweDtcbn1cblxuLm1hdC1jb2x1bW4tbmFtZSB7XG4gICAgZmxleDogMTAlO1xufVxuXG4ubWF0LWNvbHVtbi1kZXNjcmlwdGlvbiB7XG4gICAgZmxleDogMjclO1xufVxuXG4ubWF0LWNvbHVtbi1sYXN0UnVuRGF0ZSB7XG4gICAgZmxleDogMCU7XG59XG5cbi5tYXQtY29sdW1uLWNyZWF0ZWREYXRlIHtcbiAgICBmbGV4OiAwJTtcbn0gXG5cbi50ZW1wbGF0ZS1oZWFkZXIge1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIHBhZGRpbmc6IDdweCAwIDAgN3B4O1xufVxuXG4uZm9ybS1jb250YWluZXIge1xuICAgIG1hcmdpbi10b3A6IDVweDtcbn1cblxuLnBhcmFtZXRlci1uYW1lIHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xufVxuXG4ucGFyYW1ldGVyLXZhbHVlIHtcbiAgICB3aWR0aDogMjAwcHg7XG4gICAgbWFyZ2luOjVweDtcbn0iXX0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Template } from '@angular/compiler/src/render3/r3_ast';\nimport { MatTableDataSource, MatSort } from '@angular/material';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\nimport { MatDialogComponent } from './../mat-dialog/mat-dialog.component';\nimport { FormGroup, FormControl, FormBuilder, Validators, FormArray, Form } from '@angular/forms';\nimport { element } from '@angular/core/src/render3';\nimport { DataService } from './../../services/data.service';\n\n@Component({\n  selector: 'app-cfg-builder',\n  templateUrl: './cfg-builder.component.html',\n  styleUrls: ['./cfg-builder.component.scss']\n})\nexport class CfgBuilderComponent implements OnInit {\n  textValue = \"\"\n\n  //Chetan's Code\n  selectedTabIndex = 0;\n  runStatus = \"\";\n  progress = 0;\n  running = false;\n  ip = ''\n  ipAddresses = [\n    \"199.228.243.17\",\n    \"172.20.7.36\",\n    \"172.21.2.5\",\n    \"172.16.100.12\",\n    \"172.21.82.97\",\n    \"172.16.151.106\",\n    \"172.16.100.243\"\n  ]\n  outputCommand = ''\n  output = [\n    \"Sample Commands\",\n    \"Command 1 IP Address Port\",\n    \"Show Command\",\n    \"Execute Command\",\n    \"Save Command\",\n    \"Exit\"\n  ];\n  templates = [\n    {\n      id: 1,\n      name: \"Cisco Switch Configuration\",\n      description: \"This will be the description for Cisco Switch Configuration\",\n      createdDate: new Date(),\n      lastRunDate: new Date(),\n      checked: true\n    }, {\n      id: 2,\n      name: \"Cisco Router Configuration\",\n      description: \"This will be the description for Cisco Router Configuration\",\n      createdDate: new Date(),\n      lastRunDate: new Date(),\n      checked: false\n    }, {\n      id: 3,\n      name: \"HP Comware Switch Configuration\",\n      description: \"This will be the description for HP Comware Switch Configuration\",\n      createdDate: new Date(),\n      lastRunDate: new Date(),\n      checked: false\n    }, {\n      id: 4,\n      name: \"Juniper Switch Configuration\",\n      description: \"This will be the description for Juniper Switch Configuration\",\n      createdDate: new Date(),\n      lastRunDate: new Date(),\n      checked: false\n    }, {\n      id: 5,\n      name: \"Provision Switch Configuration\",\n      description: \"This will be the description for Provision Switch Configuration\",\n      createdDate: new Date(),\n      lastRunDate: new Date(),\n      checked: false\n    }\n  ];\n  provider = 'Cisco';\n  customBuild = [\n    {\n      id: 1,\n      parent: \"Basic Switch management\",\n      checked: true,\n      child: [{\n        id: 1,\n        checked: false,\n        name: \"Management Access\",\n        technologyProvider: [{\n          name: \"Cisco\",\n          parameter: [{\n            name: \"UserName\",\n            value: \"Cisco\"\n          },{\n            name: \"Password\",\n            value: \"password\"\n          },{\n            name: \"Line vty\",\n            value: '2'\n          },{\n            name: \"Line Console\",\n            value: '0'\n          }]\n        }, {\n          name: \"ProVision\",\n          parameter: []\n        }, {\n          name: \"HPE Comware\",\n          parameter: []\n        }]\n      }, {\n        id: 2,\n        checked: false,\n        name: \"Configuration Access\",\n        technologyProvider: [{\n          name: \"Cisco\",\n          parameter: []\n        }, {\n          name: \"ProVision\",\n          parameter: []\n        }, {\n          name: \"HPE Comware\",\n          parameter: []\n        }]\n      }, {\n        id: 3,\n        checked: true,\n        name: \"Console Access—Baud Rate\",\n        technologyProvider: [{\n          name: \"Cisco\",\n          parameter: [{\n            name: \"Speed\",\n            value: \"4294967295\"\n          }]\n        }, {\n          name: \"ProVision\",\n          parameter: [{\n            name: \"Baud Rate\",\n            value: \"200Hz\"\n          }]\n        }, {\n          name: \"HPE Comware\",\n          parameter: [{\n            name: \"Speed\",\n            value: \"100\"\n          }]\n        }]\n      }, {\n        id: 4,\n        checked: true,\n        name: \"Console Access—Timeout\",\n        technologyProvider: [{\n          name: \"Cisco\",\n          command: '' ,\n          parameter: [{\n            name: \"Exact Timeout\",\n            value: \"35791\"\n          }]\n        }, {\n          name: \"ProVision\",\n          parameter: []\n        }, {\n          name: \"HPE Comware\",\n          parameter: [{\n            name: \"Idle Timeout\",\n            value: \"10s\"\n          }]\n        }]\n      }, {\n        id: 5,\n        checked: false,\n        name: \"Reload\",\n        technologyProvider: [{\n          name: \"Cisco\",\n          parameter: [{\n            name: \"Reload\",\n            value: \"10\"\n          }]\n        }, {\n          name: \"ProVision\",\n          parameter: []\n        }, {\n          name: \"HPE Comware\",\n          parameter: [{\n            name: \"Reload\",\n            value: \"10\"\n          }]\n        }]\n      }]\n    }, {\n      id: 2,\n      parent: \"Switch User ID and Password\",\n      checked: true,\n      child: [{\n        id: 1,\n        checked: false,\n        name: \"Local User ID and Password\",\n        technologyProvider: [{\n          name: \"Cisco\",\n          parameter: [{\n            name: \"Username\",\n            value: \"Cisco\"\n          }, {\n            name: \"Password\",\n            value: \"password\"\n          }]\n        }, {\n          name: \"ProVision\",\n          parameter: [{\n            name: \"Username\",\n            value: \"ProVision\"\n          }, {\n            name: \"Password\",\n            value: \"password\"\n          }]\n        }, {\n          name: \"HPE Comware\",\n          parameter: [{\n            name: \"Username\",\n            value: \"Comware\"\n          }, {\n            name: \"Password\",\n            value: \"password\"\n          }]\n        }]\n      }, {\n        id: 2,\n        checked: false,\n        name: \"Recover Lost Password\",\n        technologyProvider: [{\n          name: \"Cisco\",\n          parameter: []\n        }, {\n          name: \"ProVision\",\n          parameter: []\n        }, {\n          name: \"HPE Comware\",\n          parameter: []\n        }]\n      }, {\n        id: 3,\n        checked: false,\n        name: \"Protect Local Password\",\n        technologyProvider: [{\n          name: \"Cisco\",\n          parameter: []\n        }, {\n          name: \"ProVision\",\n          parameter: []\n        }, {\n          name: \"HPE Comware\",\n          parameter: []\n        }]\n      }]\n    }, {\n      id: 3,\n      parent: \"Time Service\",\n      checked: true,\n      child: [{\n        id: 1,\n        checked: false,\n        name: \"TimeP or NTP\",\n        technologyProvider: [{\n          name: \"Cisco\",\n          parameter: [{\n            name: \"IP\",\n            value: \"123.21.13.33\"\n          }]\n        }, {\n          name: \"ProVision\",\n          parameter: [{\n            name: \"IP\",\n            value: \"123.21.13.33\"\n          }]\n        }, {\n          name: \"HPE Comware\",\n          parameter: [{\n            name: \"IP\",\n            value: \"123.21.13.33\"\n          }]\n        }]\n      }, {\n        id: 2,\n        checked: false,\n        name: \"SNTP\",\n        technologyProvider: [{\n          name: \"Cisco\",\n          parameter: []\n        }, {\n          name: \"ProVision\",\n          parameter: []\n        }, {\n          name: \"HPE Comware\",\n          parameter: []\n        }]\n      }]\n    }];\n  parameters: any;\n  status = '';\n  configurationFormGroup: FormGroup;\n\n  @ViewChild(\"tabGroup\") tabGroup;\n  @ViewChild(MatSort) sort: MatSort;\n\n  dataSource: MatTableDataSource<any>;\n  constructor(public dialog: MatDialog, private formBuilder: FormBuilder, private dataService: DataService) { }\n\n  ngOnInit() {\n    var nextLine = '\\n';\n    this.ipAddresses.forEach((element, index) => {\n      this.ip = this.ip + element + nextLine;\n      if (index == this.ipAddresses.length - 2) {\n        nextLine = '';\n      }\n    });\n    this.assignConfigurationForm();\n    this.dataSource = new MatTableDataSource<any>(this.templates);\n    this.dataSource.sort = this.sort;\n  }\n\n  onclick(event) {\n    this.textValue += 'console baud-rate ' + '1200' + '\\n'\n  }\n\n  assignConfigurationForm() {\n    this.configurationFormGroup = this.formBuilder.group({\n      template: this.formBuilder.array([]),\n      provider: [this.provider, [Validators.required]],\n      customParent: this.formBuilder.array([]),\n      IP_Hostname: [this.ip, [Validators.required]],\n      OutputCommand: [this.outputCommand,[Validators.required]]\n    });\n    const template = <FormArray>this.configurationFormGroup.controls['template'];\n    this.templates.forEach(element => {\n      template.push(this.createTemplateFormGroup(element));\n    })\n    const customParent = <FormArray>this.configurationFormGroup.controls['customParent'];\n    var index = 0;\n    this.customBuild.forEach(element => {\n      customParent.push(this.createParentFormGroup(element));\n      const childData = <FormArray>(<FormGroup>customParent.controls[index]).controls['customChild'];\n      var childIndex = 0;\n      element.child.forEach(child => {\n        childData.push(this.createChildFormGroup(child));\n        const parameter = <FormArray>(<FormGroup>childData.controls[childIndex]).controls['parameters'];\n        if (child.checked) {\n          child.technologyProvider.forEach(technologyProvider => {\n            technologyProvider.parameter.forEach(parameterElement => {\n              parameter.push(this.createAnotherParameterFormGroup(parameterElement));\n            })\n          });\n        }\n        childIndex++;\n      });\n      index++;\n    });\n    console.log(this.configurationFormGroup);\n  }\n\n  createTemplateFormGroup(element) {\n    return this.formBuilder.group({\n      templateChecked: [element.checked]\n    });\n  }\n\n  createParentFormGroup(element) {\n    return this.formBuilder.group({\n      parent: [element.checked],\n      customChild: this.formBuilder.array([])\n    });\n  }\n\n  createChildFormGroup(element) {\n    return this.formBuilder.group({\n      child: [element.checked],\n      parameters: this.formBuilder.array([])\n    });\n  }\n\n  createParameterFormGroup(element) {\n    return this.formBuilder.group({\n      parameterValue: [element.value, [Validators.required]]\n    });\n  }\n\n  createAnotherParameterFormGroup(element) {\n    return this.formBuilder.group({\n      parameterValue: [element.value]\n    });\n  }\n\n  assignParametersForm() {\n    /*var parameter = <FormArray>(<FormGroup>(<FormArray>(<FormGroup>(<FormArray>this.parameterFormGroup.\n      controls['customParent']).controls[childIndex]).controls['customChild']).\n      controls[parameterIndex]).controls['parameter'];*/\n    var customParent = <FormArray>this.configurationFormGroup.controls['customParent'];\n    var index = 0;\n    this.customBuild.forEach(parentElement => {\n      var customChild = <FormArray>(<FormGroup>customParent.controls[index]).controls['customChild'];\n      var childIndex = 0;\n      parentElement.child.forEach(childElement => {\n        var parameter = <FormArray>(<FormGroup>customChild.controls[childIndex]).controls['parameters'];\n        parameter = this.formBuilder.array([]);\n        const par = <FormArray>(<FormGroup>customChild.controls[childIndex]).controls['parameters'];\n        if (childElement.checked) {\n          childElement.technologyProvider.forEach(technologyProvider => {\n            if (technologyProvider.name == this.provider) {\n              technologyProvider.parameter.forEach(parameterElement => {\n                par.push(this.createParameterFormGroup(parameterElement));\n              })\n            }\n          });\n        }\n        // console.log(parameter);\n        childIndex++;\n      });\n      // console.log(customChild);\n      index++;\n    });\n    // console.log(this.configurationFormGroup);\n  }\n\n  /*\n  updateTabIndex(tabChangeEvent): void {\n    this.selectedTabIndex = tabChangeEvent.index;\n  }\n\n  nextTab() {\n    this.selectedTabIndex += 1;\n  }\n\n  previousTab() {\n    this.selectedTabIndex -= 1;    \n  }*/\n\n  run() {\n    if (this.configurationFormGroup.invalid) {\n      this.running = false;\n      return;\n    }\n    this.ipAddresses = this.ip.split(/\\n/);\n    var finalIp = [];\n    this.ipAddresses.forEach((element) => {\n      if (element != '') {\n        finalIp.push(element);\n      }\n    });\n    this.ipAddresses = finalIp;\n    this.running = true;\n    this.progress = 100\n    setTimeout(() => {\n      this.status = \"Success\";\n      this.runStatus = \"Executed Successfully\"\n      var flag = false, index = 0;\n      this.dataService.report.forEach((element, elementIndex)=> {\n        if(element.name == 'Configuration Builder') {\n          flag = true;\n          index = elementIndex;\n        }\n      })\n      if(flag) {\n        this.dataService[index].runBy = this.configurationFormGroup.controls['UserName'].value;\n        //this.dataService[index].commands = this.output;\n        this.dataService.report[index].lastRunDate = new Date();\n        this.dataService.report[index].status = this.status;\n        this.ipAddresses.forEach(element=> {\n          this.dataService.report[index].details.push({\n            ip: element,\n            log: \"This.wil be the log for \" + element\n          })\n        })\n      } else {\n        this.dataService.report.push({\n          id : this.dataService.report.length + 1,\n          name: \"Configuration Builder\",\n          description: \"This will be the description for Configuration Builder\",\n          createdDate: new Date(),\n          commands : this.output,\n          details: [],\n          lastRunDate: new Date(),\n          runBy: \"Admin\",\n          status : this.status\n        })\n        this.ipAddresses.forEach(element=> {\n          this.dataService.report[this.dataService.report.length-1].details.push({\n            ip: element,\n            log: \"This.wil be the log for \" + element\n          })\n        })\n      }  \n    }, 14000);\n  }\n\n  openModal() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.autoFocus = true;\n    dialogConfig.width = '1000px';\n    dialogConfig.maxHeight = '650px';\n    dialogConfig.data = {\n      id: 1,\n      title: 'Template Details',\n      data: '',\n    };\n    const dialogRef = this.dialog.open(MatDialogComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe(result => {\n      console.log(result);\n      var date = new Date();\n      var newTemplate = {\n        id: this.templates.length + 1,\n        name: result.name,\n        description: result.description,\n        createdDate: date,\n        lastRunDate: date,\n        checked: false\n      };\n      this.templates.push(newTemplate);\n      this.dataSource = new MatTableDataSource<any>(this.templates);\n      this.assignConfigurationForm();\n    });\n  }\n\n  onclickReset() {\n    this.running = false\n    this.progress = 0\n    this.runStatus = \"\"\n    this.assignConfigurationForm()\n  }\n\n  setIp(){\n    this.configurationFormGroup.controls['IP_Hostname'].setValue(this.ip)\n  }\n\n  setOutputCommands() {\n    var nextLine = '\\n';\n    if(this.customBuild[0].child[0].checked && this.provider == 'Cisco'){\n      this.outputCommand = \"username \" + this.customBuild[0].child[0].technologyProvider[0].parameter[0].value\n        + \" password \" + this.customBuild[0].child[0].technologyProvider[0].parameter[1].value +\n        \"\\nLine vty \" + this.customBuild[0].child[0].technologyProvider[0].parameter[2].value +\n        \"\\nLine console \" + this.customBuild[0].child[0].technologyProvider[0].parameter[3].value\n      this.output = this.outputCommand.split(nextLine);\n    } else {\n      this.output = [\n        \"Sample Commands\",\n        \"Command 1 IP Address Port\",\n        \"Show Command\",\n        \"Execute Command\",\n        \"Save Command\",\n        \"Exit\"\n      ];\n      this.output.forEach((element, index) => {\n        this.outputCommand = this.outputCommand + element + nextLine;\n        if (index == this.output.length - 2) {\n          nextLine = '';\n        }\n      });\n    }\n  }\n  //End of Chetan's Code\n\n}\n","module.exports = \"<form [formGroup]=\\\"cfgConverterForm\\\">\\n  <div style=\\\"margin:5px\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"5px\\\" fxLayoutAlign=\\\"center stretch\\\">\\n  <mat-card fxFlex>\\n    <mat-card-title>\\n      Input Commands \\n      <div style=\\\"float:right;\\\">\\n        <button mat-raised-button class=\\\"button-row\\\" (click)=\\\"openDailog()\\\">\\n          Provision Sample Command\\n        </button>  \\n      </div>\\n    </mat-card-title>\\n    <mat-form-field style=\\\"width:100%;\\\" appearance=\\\"outline\\\">\\n      <textarea matInput rows=\\\"20\\\"  [(ngModel)]=\\\"inputConfiguration\\\" minlength=\\\"1\\\" maxlength=\\\"1000\\\" formControlName=\\\"Input\\\"></textarea>\\n      <mat-error>Input is required</mat-error>\\n    </mat-form-field>\\n  </mat-card>\\n  <mat-card>\\n    <mat-card-title>Convert</mat-card-title>\\n    <div class=\\\"form-container\\\">\\n      <mat-form-field appearance=\\\"outline\\\">\\n        <mat-label>Source techonology provider</mat-label>\\n        <mat-select [(ngModel)]=\\\"source\\\" placeholder=\\\"Select\\\" formControlName=\\\"TechnologyProvider\\\">\\n          <mat-option value=\\\"cisco\\\">Cisco </mat-option>\\n          <mat-option value=\\\"provision\\\">ProVision</mat-option>\\n          <mat-option value=\\\"comware5\\\">HPE Comware</mat-option>\\n          <mat-option value=\\\"procurve\\\">HPE Procurve</mat-option>\\n          <mat-option value=\\\"aruba\\\">HPE Aruba</mat-option>\\n          <mat-option value=\\\"juniper\\\">Juniper</mat-option>\\n          <mat-option value=\\\"enterasys\\\">Enterasys</mat-option>\\n          <mat-option value=\\\"brocade\\\">Brocade</mat-option>\\n          <mat-option value=\\\"alcatel\\\">Alcatel Luscent</mat-option>\\n        </mat-select>\\n        <mat-error>Source provider is required</mat-error>\\n      </mat-form-field>\\n\\n      <mat-form-field appearance=\\\"outline\\\">\\n        <mat-label>Target to convert</mat-label>\\n        <mat-select [(ngModel)]=\\\"target\\\" placeholder=\\\"Select\\\" formControlName=\\\"Target\\\">            \\n          <mat-option value=\\\"cisco\\\">Cisco </mat-option>\\n          <mat-option value=\\\"provision\\\">ProVision</mat-option>\\n          <mat-option value=\\\"comware5\\\">HPE Comware</mat-option>\\n          <mat-option value=\\\"procurve\\\">HPE Procurve</mat-option>\\n          <mat-option value=\\\"aruba\\\">HPE Aruba</mat-option>\\n          <mat-option value=\\\"juniper\\\">Juniper</mat-option>\\n          <mat-option value=\\\"enterasys\\\">Enterasys</mat-option>\\n          <mat-option value=\\\"brocade\\\">Brocade</mat-option>\\n          <mat-option value=\\\"alcatel\\\">Alcatel Luscent</mat-option>\\n        </mat-select>\\n        <mat-error>Target is required</mat-error>\\n      </mat-form-field>\\n\\n      <div fxLayout=\\\"row\\\">\\n      <button fxFlex=\\\"50\\\" mat-raised-button color=\\\"primary\\\" (click)=\\\"onclick()\\\" >Convert</button>\\n      <button fxFlex=\\\"50\\\" mat-raised-button class=\\\"button-row\\\" (click)=\\\"onclickReset()\\\"  type=\\\"reset\\\" style=\\\"margin-left: 5px;\\\">\\n          Reset\\n      </button>\\n      </div>\\n    </div>\\n  </mat-card>\\n  <mat-card fxFlex>\\n    <mat-card-title>\\n      Output Commands\\n      <span class=\\\"{{status}}\\\">{{ runStatus }}</span>\\n    </mat-card-title>\\n    <mat-form-field style=\\\"width:100%;\\\" appearance=\\\"outline\\\">\\n      <textarea matInput rows=\\\"20\\\"  [(ngModel)]=\\\"outputConfiguration\\\" formControlName=\\\"Output\\\"></textarea>\\n    </mat-form-field>\\n  </mat-card>\\n</div>\\n</form>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2ZnLWNvbnZlcnRvci9jZmctY29udmVydG9yLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\nimport { MatDialogComponent } from './../mat-dialog/mat-dialog.component';\nimport { ReportComponent } from './../report/report.component';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { DataService } from './../../services/data.service';\nimport { element } from '@angular/core/src/render3';\n\n@Component({\n  selector: 'app-cfg-convertor',\n  templateUrl: './cfg-convertor.component.html',\n  styleUrls: ['./cfg-convertor.component.scss']\n})\nexport class CfgConvertorComponent implements OnInit {\n  inputConfiguration = \"\";\n  outputConfiguration = \"\";\n  source = \"provision\";\n  target = \"comware5\";\n  cfgConverterForm: FormGroup;\n  runStatus = '';\n  status;\n\n  constructor(private http: HttpClient, public dialog: MatDialog, private formBuilder: FormBuilder,\n    private dataService: DataService, private reportComponent: ReportComponent) { }\n\n  ngOnInit() {\n    this.cfgConverterForm = this.formBuilder.group({\n      Input: ['', [Validators.required]],\n      TechnologyProvider: ['', [Validators.required]],\n      Target: ['', [Validators.required, Validators]],\n      Output: ['', []]\n    });\n    this.inputConfiguration = \"reload\" +\n    \"\\nshow system fan\\n\" \n  }\n\n  onclick() {\n    if (this.cfgConverterForm.invalid) {\n      return;\n    }\n    this.outputConfiguration = '';\n    this.runStatus = \"\";\n\n    console.log(this.source)\n    console.log(this.target)\n    console.log(this.inputConfiguration)\n   /*setTimeout(() => {\n      if (this.source == 'provision' || this.target == 'comware5') {\n        this.status = \"Success\";\n        this.outputConfiguration = \n        'system-view' +\n        '\\ndir' +\n        '\\ndisplay version' +\n        '\\ndisplay current-configuration' +\n        '\\ndisplay saved-configuration' +\n        '\\ndisplay history' +\n        '\\ndisplay info-center' +\n        '\\ndisplay ip routing-table' +\n        '\\ndisplay ip interface brief' +\n        '\\ndisplay brief interfaces'\n\n        this.runStatus = \"Executed Successfully\"\n      } else {\n        this.status = \"Failure\";\n        this.runStatus = \"Failed to execute\";\n      }\n      var finalCommand = [];\n      console.log(this.inputConfiguration);\n      this.inputConfiguration.split(/\\n/).forEach((element) => {\n        if (element != '') {\n          finalCommand.push(element);\n        }\n      });\n      var flag = false, index = 0;\n      this.dataService.report.forEach((element, elementIndex) => {\n        if (element.name == 'Config Converter') {\n          flag = true;\n          index = elementIndex;\n        }\n      })\n      if (flag) {\n        this.dataService[index].commands = finalCommand;\n        this.dataService.report[index].lastRunDate = new Date();\n        this.dataService.report[index].status = this.status\n      } else {\n        this.dataService.report.push({\n          id: this.dataService.report.length + 1,\n          name: \"Config Converter\",\n          description: \"This will be the description for Config Converter\",\n          createdDate: new Date(),\n          commands: finalCommand,\n          details: [],\n          lastRunDate: new Date(),\n          runBy: \"Admin\",\n          status: this.status\n        })\n      }\n    }, 2000);*/\n\n   \n    let input={\n      \"source\":this.source,\n      \"target\":this.target,\n      \"inputConfiguration\":this.inputConfiguration\n    }\n    this.http.post(\"http://127.0.0.1:5000/api/convert\", input)\n    .subscribe((data:any) => {\n      \n        this.outputConfiguration = data.outputConfiguration;\n\n      if (data.errorsText.trim()) {\n        this.outputConfiguration += '\\n\\n----Conversion Errors----';\n        this.outputConfiguration += data.errorsText;\n      }\n      if (data.residualText.trim()) {\n        /*this.outputConfiguration += '\\n\\n----Unrecognized command and conversion stopped----\\n';*/\n        this.outputConfiguration += '\\n\\n----Unrecognized command ----\\n';\n        this.outputConfiguration += data.residualText;\n      }\n      /*else\n      {\n        this.runStatus = \"Executed Successfully\"\n      }*/\n    });\n    \n\n  }\n\n  openDailog() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.autoFocus = true;\n    dialogConfig.width = '1000px';\n    dialogConfig.maxHeight = '650px';\n    dialogConfig.data = {\n      id: 1,\n      title: 'Sample Commands',\n      data: [\n        \"reload\",\n        \"enable\",\n        \"show modules\",\n        \"show system power-supply\",\n        \"show system temperature\",\n        \"show telnet\",\n        \"kill 3\",\n        \"configure\",\n        \"show tech all\",\n        \"show running-config\",\n        \"show system fans\",\n      ],\n      oldData: [\"show interfaces f0/18 switchport\",\n        \"show lacp 1 internal\",\n        \"network 10.1.220.0 0.0.0.255 area 0\",\n        \"username mphasisadmin privilege 15 India\",\n        \"logging console\",\n        \"snmp-server host 10.0.100.21 version 2c private\",\n        \"snmp-server community public ro\",\n        \"snmp-server contact Lab_Engr\",\n        \"show crypto pki certificates verbose\"]\n    };\n    const dialogRef = this.dialog.open(MatDialogComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe(result => {\n      console.log(\"Closed\");\n    });\n  }\n\n  onclickReset() {\n    this.runStatus = '';\n  }\n\n\n}\n","module.exports = \"<h2 mat-dialog-title>{{modalTitle}}</h2>\\n<hr *ngIf=\\\"modalTitle=='Report'\\\"/>\\n<mat-dialog-content *ngIf=\\\"modalTitle=='Sample Commands'\\\">\\n  <div *ngFor=\\\"let data of data.data\\\">\\n    {{data}}\\n  </div>\\n</mat-dialog-content>\\n<mat-dialog-content *ngIf=\\\"modalTitle=='Template Details'\\\">\\n  <div class=\\\"form-container\\\">\\n    <mat-form-field appearance=\\\"outline\\\">\\n        <mat-label>Template Name</mat-label>\\n      <input matInput name=\\\"TemplateName\\\" [(ngModel)]=\\\"template.name\\\" required/>\\n      <mat-error>Template name is required</mat-error>\\n    </mat-form-field>\\n    <mat-form-field appearance=\\\"outline\\\">\\n        <mat-label>Description</mat-label>\\n        <!-- <textarea matInput rows=\\\"5\\\" formControlName=\\\"Description\\\" required></textarea> -->\\n        <input matInput name=\\\"Description\\\" [(ngModel)]=\\\"template.description\\\" required/>\\n        <mat-error>Description is required</mat-error>\\n    </mat-form-field>\\n  </div>\\n</mat-dialog-content>\\n<mat-dialog-content *ngIf=\\\"modalTitle=='Report'\\\">\\n  <div fxLayout=\\\"row\\\" class=\\\"margin-row\\\"> <div class=\\\"content-header\\\">Transaction Name </div>: {{data.data.name}}</div>\\n  <div fxLayout=\\\"row\\\" class=\\\"margin-row\\\"> <div class=\\\"content-header\\\">Transaction Description </div>: {{data.data.description}}</div>\\n  <div fxLayout=\\\"row\\\" class=\\\"margin-row\\\"> <div class=\\\"content-header\\\">Created Date </div>: {{data.data.createdDate | date: 'MM-dd-yyyy hh:mm:ss aa'}}</div>\\n  <div fxLayout=\\\"row\\\" class=\\\"margin-row\\\"> <div class=\\\"content-header\\\">Last Run Date </div>: {{data.data.lastRunDate | date: 'MM-dd-yyyy hh:mm:ss aa'}}</div>\\n  <div fxLayout=\\\"row\\\" class=\\\"margin-row\\\"> <div class=\\\"content-header\\\">Run By </div>: {{data.data.runBy}}</div>\\n  <div class=\\\"margin-row\\\" *ngIf=\\\"data.data.commands.length != 0\\\"> \\n    <div fxLayout=\\\"row\\\"> \\n      <div class=\\\"content-header\\\">Commands Executed</div>:\\n    </div>\\n    <div *ngFor=\\\"let command of data.data.commands\\\"><div class=\\\"command\\\">{{command}}</div></div>\\n  </div>\\n  <div fxLayout=\\\"row\\\" class=\\\"margin-row\\\"> <div class=\\\"content-header\\\">Status</div>: {{data.data.status}}</div>\\n  <div *ngIf=\\\"data.data.details.length != 0\\\">\\n  <div fxLayout=\\\"row\\\" class=\\\"margin-row\\\"> <div class=\\\"content-header\\\">IP Details</div></div>\\n  <div *ngFor=\\\"let ip of data.data.details; let ipIndex = index\\\"> \\n    <div fxLayout=\\\"row\\\" class=\\\"margin-row\\\">\\n      <div>{{ipIndex + 1}} - {{ip.ip}} </div>\\n      <div *ngIf=\\\"ip.show == true\\\" (click)=\\\"ip.show = !ip.show\\\"><img src=\\\"assets/images/upword_arrow.png\\\"/></div>\\n      <div *ngIf=\\\"ip.show != true\\\" (click)=\\\"ip.show = !ip.show\\\"><img src=\\\"assets/images/downword_arrow.png\\\"/></div>\\n    </div>\\n    <div class=\\\"content\\\" *ngIf=\\\"ip.show == true\\\">{{ip.log}}</div>\\n  </div>\\n</div>\\n</mat-dialog-content>\\n<mat-dialog-actions>\\n  <button mat-raised-button color=\\\"primary\\\" [mat-dialog-close]=\\\"template\\\" mat-dialog-close *ngIf=\\\"modalTitle=='Template Details'\\\">Save</button>\\n <button mat-raised-button class=\\\"button-row\\\" mat-dialog-close>Close</button>\\n</mat-dialog-actions>\"","module.exports = \".mat-dialog-title {\\n  color: #673ab7;\\n  text-align: center;\\n  font-size: 25px; }\\n\\n.margin-row {\\n  margin: 1% 0; }\\n\\n.content-header {\\n  font-weight: bold;\\n  width: 175px; }\\n\\n.content {\\n  margin-left: 60px; }\\n\\n.command {\\n  margin-left: 175px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9tYXQtZGlhbG9nL0Q6XFwyMDIxXFxuZXR3b3JrX2F1dG9tYXRpb25cXFVYL3NyY1xcYXBwXFxjb21wb25lbnRzXFxtYXQtZGlhbG9nXFxtYXQtZGlhbG9nLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZUFBYztFQUNkLG1CQUFrQjtFQUNsQixnQkFBZSxFQUNsQjs7QUFFRDtFQUNJLGFBQVksRUFDZjs7QUFFRDtFQUNJLGtCQUFpQjtFQUNqQixhQUFZLEVBQ2Y7O0FBRUQ7RUFDSSxrQkFBaUIsRUFDcEI7O0FBRUQ7RUFDSSxtQkFBa0IsRUFDckIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL21hdC1kaWFsb2cvbWF0LWRpYWxvZy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tYXQtZGlhbG9nLXRpdGxlIHtcbiAgICBjb2xvcjogIzY3M2FiNztcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAyNXB4O1xufVxuXG4ubWFyZ2luLXJvdyB7XG4gICAgbWFyZ2luOiAxJSAwO1xufVxuXG4uY29udGVudC1oZWFkZXIge1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIHdpZHRoOiAxNzVweDtcbn1cblxuLmNvbnRlbnQge1xuICAgIG1hcmdpbi1sZWZ0OiA2MHB4O1xufVxuXG4uY29tbWFuZCB7XG4gICAgbWFyZ2luLWxlZnQ6IDE3NXB4O1xufSJdfQ== */\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\n\n@Component({\n  selector: 'app-mat-dialog',\n  templateUrl: './mat-dialog.component.html',\n  styleUrls: ['./mat-dialog.component.scss']\n})\nexport class MatDialogComponent implements OnInit {\n\n  modalTitle: string;\n  template = {};\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any) {\n    this.modalTitle = data.title;\n    if (this.modalTitle=='Report') {\n      data.data.details.forEach(detail => {\n        detail.show = false;\n      });\n    }\n  }\n    \n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<form [formGroup]=\\\"remCmdExeForm\\\">\\n  <div style=\\\"margin:5px\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"5px\\\" fxLayoutAlign=\\\"center stretch\\\">\\n\\n    <mat-card fxFlex=\\\"20\\\">\\n      <mat-card-title>IPs/Hostnames</mat-card-title>\\n      <mat-form-field style=\\\"width:100%;height:100%\\\" appearance=\\\"outline\\\" *ngIf=\\\"running == false\\\">\\n        <textarea matInput rows=\\\"20\\\" required [(ngModel)]=\\\"ip\\\" formControlName=\\\"IP_Hostname\\\"></textarea>\\n        \\n        <mat-error *ngIf=\\\"remCmdExeForm.controls['IP_Hostname'].hasError('required')\\\">IPs/Hostnames is required</mat-error>\\n      </mat-form-field>\\n    <mat-list *ngIf=\\\"running == true\\\">\\n        <mat-list-item *ngFor=\\\"let ipaddress of ipAddresses; let i = index\\\" typeahead-wait-ms=\\\"1000\\\">\\n          <h4 mat-line>{{ ipaddress }}</h4>\\n          <mat-progress-spinner \\n            [color]=\\\"executionOutput[ipaddress]?.error?'warn':'primary'\\\" \\n            [mode]=\\\"executionOutput[ipaddress]?.progress==100?'determinate':'indeterminate'\\\" \\n            [value]=\\\"100\\\" \\n            [diameter]=\\\"20\\\"></mat-progress-spinner>\\n        </mat-list-item>\\n      </mat-list> \\n     <!---- <div *ngIf=\\\"running == true\\\">\\n        <div *ngFor=\\\"let ipaddress of ipAddresses;\\\">\\n          <h4>{{ ipaddress }}</h4>\\n          <mat-progress-spinner \\n            [color]=\\\"executionOutput[ipaddress]?.error?'warn':'primary'\\\" \\n            [mode]=\\\"executionOutput[ipaddress]?.progress==100?'determinate':'indeterminate'\\\" \\n            [value]=\\\"100\\\" \\n            [diameter]=\\\"20\\\"></mat-progress-spinner>\\n        </div>\\n      </div>-->\\n      </mat-card>\\n\\n    <mat-card fxFlex=\\\"50\\\">\\n      <mat-card-title>Commands\\n        <span class=\\\"{{status}}\\\">{{ runStatus }}</span></mat-card-title>\\n      <mat-form-field style=\\\"width:100%;height:100%\\\" appearance=\\\"outline\\\">\\n        <textarea matInput rows=\\\"20\\\" [(ngModel)]=\\\"command\\\" formControlName=\\\"Commands\\\"  required minlength=\\\"1\\\" maxlength=\\\"1000\\\"></textarea>\\n        <mat-error *ngIf=\\\"remCmdExeForm.controls['Commands'].hasError('required')\\\">Command is required</mat-error>\\n      </mat-form-field>\\n    </mat-card>\\n    <mat-card fxFlex=\\\"30\\\">\\n      <mat-card-title>Execute</mat-card-title>\\n      <div class=\\\"form-container\\\">\\n          <section class=\\\"section-style\\\"> \\n        <mat-radio-group class=\\\"form-padding\\\" formControlName=\\\"deviceConnectionType\\\">\\n              <mat-radio-button class=\\\"radio-margin\\\" value=\\\"telnet\\\" [checked]=\\\"true\\\" >Telnet</mat-radio-button>\\n              <mat-radio-button class=\\\"radio-margin\\\" value=\\\"ssh\\\">SSH</mat-radio-button>                 \\n            </mat-radio-group> \\n          </section>\\n          <section class=\\\"section-style\\\"> \\n            <mat-checkbox class=\\\"radio-margin\\\"  formControlName=\\\"isJumpserver\\\" matTooltip=\\\"check if jumpserver\\\"  >Jump server\\n              </mat-checkbox>             \\n            </section>\\n                      \\n        <div *ngIf=\\\"remCmdExeForm.controls['isJumpserver'].value\\\" fxLayout=\\\"column\\\" fxLayoutGap=\\\"32px\\\"> \\n          <mat-form-field appearance=\\\"outline\\\" >\\n              <mat-label>Jump Server IP</mat-label>\\n              <input matInput formControlName=\\\"jumpServerIP\\\" [(ngModel)]=\\\"jumpServerIP\\\" />\\n              <mat-error *ngIf=\\\"remCmdExeForm.controls['jumpServerIP'].hasError('required')\\\">Jump server is required</mat-error>\\n            </mat-form-field>\\n          <mat-form-field appearance=\\\"outline\\\">\\n              <mat-label>JumpServer Username</mat-label>\\n              <input matInput formControlName=\\\"jumpServerUserName\\\" [(ngModel)]=\\\"jumpServerUserName\\\" />\\n              <mat-error *ngIf=\\\"remCmdExeForm.controls['jumpServerUserName'].hasError('required')\\\">Username is required</mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"outline\\\">\\n                <mat-label>Jump Password</mat-label>\\n                <input matInput formControlName=\\\"jumpServerPassword\\\" [(ngModel)]=\\\"jumpServerPassword\\\" [type]=\\\"hide ? 'password' : 'text'\\\"/>\\n                <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n                <mat-error *ngIf=\\\"remCmdExeForm.controls['jumpServerPassword'].hasError('required')\\\">Password is required</mat-error>\\n              </mat-form-field>   \\n            </div>\\n        <mat-form-field appearance=\\\"outline\\\">\\n          <mat-label>Source techonology provider</mat-label>\\n          <mat-select placeholder=\\\"Provider\\\" [(ngModel)]=\\\"Provider\\\" formControlName=\\\"Provider\\\">\\n            <mat-option value=\\\"Cisco IOS\\\">Cisco IOS </mat-option>\\n            <mat-option value=\\\"Cisco Nexus OS\\\" disabled>Cisco Nexus OS</mat-option>\\n            <mat-option value=\\\"option\\\" disabled>VMware NSX</mat-option>\\n            <mat-option value=\\\"option\\\" disabled>Arista</mat-option>\\n            <mat-option value=\\\"option\\\" disabled>Cumulus </mat-option>\\n            <mat-option value=\\\"option\\\" disabled>Aruba</mat-option>\\n            <mat-option value=\\\"option\\\" disabled>Juniper</mat-option>\\n            <mat-option value=\\\"option\\\" disabled>Enterasys </mat-option>\\n          </mat-select>\\n          <mat-error *ngIf=\\\"remCmdExeForm.controls['Provider'].hasError('required')\\\">Source techonology provider is required</mat-error>\\n        </mat-form-field>\\n        <mat-form-field appearance=\\\"outline\\\">\\n          <mat-label>Device Username</mat-label>\\n          <input matInput formControlName=\\\"deviceUserName\\\" [(ngModel)]=\\\"deviceUserName\\\" />\\n          <mat-error *ngIf=\\\"remCmdExeForm.controls['deviceUserName'].hasError('required')\\\">Username is required</mat-error>\\n        </mat-form-field>\\n        <mat-form-field appearance=\\\"outline\\\">\\n          <mat-label>Device Password</mat-label>\\n          <input matInput formControlName=\\\"devicePassword\\\" [(ngModel)]=\\\"devicePassword\\\" [type]=\\\"hide ? 'password' : 'text'\\\">\\n          <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n          <mat-error *ngIf=\\\"remCmdExeForm.controls['devicePassword'].hasError('required')\\\">Password is required</mat-error>\\n        </mat-form-field>\\n\\n       \\n        \\n        <div>\\n          <button mat-raised-button color=\\\"primary\\\" class=\\\"button-row\\\" (click)=\\\"onclick()\\\" [disabled]=\\\"running\\\">\\n            Run\\n          </button>\\n          <button mat-raised-button class=\\\"button-row\\\" (click)=\\\"onclickReset()\\\">\\n            Reset\\n          </button>\\n        </div>\\n      </div>\\n    </mat-card>\\n\\n  </div>\\n</form>\"","module.exports = \".button-row {\\n  margin-right: 8px; }\\n\\n.section-style {\\n  display: flex;\\n  align-content: center;\\n  align-items: center;\\n  height: 60px; }\\n\\n.radio-margin {\\n  margin: 0 10px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yZW1vdGUtY21kLWV4ZWN1dG9yL0Q6XFwyMDIxXFxuZXR3b3JrX2F1dG9tYXRpb25cXFVYL3NyY1xcYXBwXFxjb21wb25lbnRzXFxyZW1vdGUtY21kLWV4ZWN1dG9yXFxyZW1vdGUtY21kLWV4ZWN1dG9yLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQVksa0JBQWtCLEVBQUU7O0FBRWhDO0VBQ0ksY0FBYTtFQUNiLHNCQUFxQjtFQUNyQixvQkFBbUI7RUFDbkIsYUFBWSxFQUNiOztBQUVEO0VBQ0UsZUFBYyxFQUNmIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9yZW1vdGUtY21kLWV4ZWN1dG9yL3JlbW90ZS1jbWQtZXhlY3V0b3IuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYnV0dG9uLXJvd3ttYXJnaW4tcmlnaHQ6IDhweCB9XG5cbi5zZWN0aW9uLXN0eWxlIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGhlaWdodDogNjBweDtcbiAgfVxuICBcbiAgLnJhZGlvLW1hcmdpbiB7XG4gICAgbWFyZ2luOiAwIDEwcHg7XG4gIH0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { element } from '@angular/core/src/render3';\nimport { DataService } from './../../services/data.service';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from './../../../environments/environment';\n\n@Component({\n  selector: 'app-remote-cmd-executor',\n  templateUrl: './remote-cmd-executor.component.html',\n  styleUrls: ['./remote-cmd-executor.component.scss']\n})\nexport class RemoteCmdExecutorComponent implements OnInit {\n  baseAPI = environment.baseAPI;\n  runStatus = \"\"\n  progress = 0\n  running = false\n  status = ''\n  remCmdExeForm: FormGroup;\n  executionOutput = {};\n  hide = true;\n  enableHide = true;\n  output=\"\"\n  \n \n  ip=''\n  ipAddresses=[]  \n  command = ''\n  commands=[]\n  jumpServerIP=\"\"\n  jumpServerUserName=\"\"\n  jumpServerPassword=\"\"\n  Provider=\"\"\n  deviceUserName=\"\"\n  devicePassword=\"\"\n  \n  \n \n  constructor(private http: HttpClient,private formBuilder: FormBuilder, private dataService: DataService) { }\n\n  ngOnInit() {\n    this.remCmdExeForm = this.formBuilder.group({\n      IP_Hostname: ['', [Validators.required]],\n      Commands: ['', [Validators.required]],    \n\n      jumpServerIP: [''],     \n      jumpServerUserName: [''],\n      jumpServerPassword: [''],\n     \n      deviceUserName: ['', [Validators.required, Validators.maxLength(200)]],\n      devicePassword: ['', [Validators.required, Validators.maxLength(200)]],\n      Provider: ['', [Validators.required]],\n      deviceConnectionType: ['telnet'],\n      isJumpserver: [false]\n    });\n    var nextLine = '\\n';\n    this.ipAddresses.forEach((element, index) => {\n      this.ip = this.ip + element + nextLine;\n      if(index == this.ipAddresses.length-2){\n        nextLine = '';\n      }\n    })\n    \n    nextLine = '\\n';\n    this.commands.forEach((element,index)=> {\n      this.command = this.command + element + nextLine;\n      if(index == this.commands.length-2){\n        nextLine = '';\n      }\n    })\n  \n    this.remCmdExeForm.get('isJumpserver').valueChanges.subscribe(\n      (mode) => {\n        if (mode === true) {\n          this.remCmdExeForm.get('jumpServerIP').setValidators([Validators.required, Validators.maxLength(200)]);\n          this.remCmdExeForm.get('jumpServerUserName').setValidators([Validators.required, Validators.maxLength(200)]);\n          this.remCmdExeForm.get('jumpServerPassword').setValidators([Validators.required, Validators.maxLength(200)]);\n      }\n      else if (mode === false) {          \n          this.remCmdExeForm.get('jumpServerIP').clearValidators();\n          this.remCmdExeForm.get('jumpServerUserName').clearValidators();\n          this.remCmdExeForm.get('jumpServerPassword').clearValidators();\n      }\n      \n      this.remCmdExeForm.get('jumpServerIP').updateValueAndValidity();\n      this.remCmdExeForm.get('jumpServerUserName').updateValueAndValidity();\n      this.remCmdExeForm.get('jumpServerPassword').updateValueAndValidity();\n      })\n  \n  }\n\n  \n\n  onclick() {\n    \n   \n    this.ipAddresses = this.ip.split(/\\n/);\n    var finalIp = [];\n    this.ipAddresses.forEach((element)=> {\n      if(element != ''){\n        finalIp.push(element);\n      }\n    });\n    this.ipAddresses = finalIp;\n    this.commands = this.command.split(/\\n/);\n    var finalCommand = [];\n    this.commands.forEach((element)=> {\n      if(element != ''){\n        finalCommand.push(element);\n      }\n    });\n    this.commands = finalCommand;\n    if (this.remCmdExeForm.invalid) {\n      return;\n    }\n    \n    let input={\n      \"jmpServerIp\":this.jumpServerIP,\n      \"jmpServerUsername\":this.jumpServerUserName,\n      \"jmpServerPassword\":this.jumpServerPassword,\n      \"OEM\":this.Provider,\n      \"deviceUsername\":this.deviceUserName,\n      \"devicePassword\":this.devicePassword,\n      \"deviceAddresses\":this.ipAddresses,\n      \"commands\":this.commands,\n      \"deviceConnectionType\":this.remCmdExeForm.controls['deviceConnectionType'].value,\n      \"isJumpServer\":this.remCmdExeForm.controls['isJumpserver'].value\n    }\n    this.running = true\n    this.executionOutput = {}\n    //this.http.post(this.baseAPI + \"api/remote-execution\", input)\n    this.http.post(\"http://127.0.0.1:5000/api/remote-execution\", input)\n    .subscribe((data:any) => {\n      // this.running = false\n        this.executionOutput = data;    \n        this.status = \"Success\";\n        this.runStatus = \"Executed Successfully\" \n        this.running=false;\n        \n    },(error:any)=>{\n        this.status = \"Failure\";\n        this.runStatus = \"Executed Failed\";\n        this.running=false;\n    });\n    \n    if(this.runStatus==\"Executed Successfully\")\n    {\n      this.onclickReset();\n    }\n\n   \n    this.running = true\n    this.progress = 100\n    this.runStatus = \"\";\n\n    /*setTimeout(() => {   \n      this.status = \"Success\";\n      this.runStatus = \"Executed Successfully\"\n      var flag = false, index = 0;\n      this.dataService.report.forEach((element, elementIndex)=> {\n        if(element.name == 'Remote Commands Executor') {\n          flag = true;\n          index = elementIndex;\n        }\n      })\n      \n    }, 14000);*/\n   \n\n\n  }\n\n  onclickReset() {\n    this.running = false\n    this.progress = 0\n    this.runStatus = \"\"\n  }\n\n}\n","module.exports = \"<div><button mat-raised-button class=\\\"button-row\\\" (click)=\\\"refreshbutton()\\\" type=\\\"reset\\\" >\\n    Refresh\\n  </button></div>\\n  <div style=\\\"margin:5px\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"5px\\\" fxLayoutAlign=\\\"center stretch\\\">\\n    \\n    <div *ngIf=\\\"report.length == 0\\\" class=\\\"header-primary-text\\\">No reports present</div>\\n    <mat-card fxFlex=\\\"100\\\" *ngIf=\\\"report.length != 0\\\">\\n      <mat-table #table [dataSource]=\\\"refreshReport()\\\" matSort>\\n        <ng-container matColumnDef=\\\"ID\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">Transaction id\\n          </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let element\\\">\\n            {{element.ID}}\\n          </mat-cell>\\n        </ng-container>\\n        <ng-container matColumnDef=\\\"Netauto_Module\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Module \\n          </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let element\\\">\\n            <a (click)=\\\"openModal(element)\\\" style=\\\"cursor:pointer;\\\">{{element.Netauto_Module}}</a>\\n          </mat-cell>\\n        </ng-container>\\n        <ng-container matColumnDef=\\\"OEM\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n           OEM </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let element\\\">\\n            <div>{{element.OEM}} </div>\\n          </mat-cell>\\n        </ng-container>\\n        <ng-container matColumnDef=\\\"Executed_Date\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n            Executed Date </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let element\\\">\\n            <div>{{element.Executed_Date}} </div>\\n          </mat-cell>\\n        </ng-container>\\n        <ng-container matColumnDef=\\\"Executed_By\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n            Executed By </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let element\\\">\\n            <div>{{element.Executed_By}} </div>\\n          </mat-cell>\\n        </ng-container>\\n        <ng-container matColumnDef=\\\"IP_Hostname\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n            IP/HOst name </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let element\\\">\\n            <div>{{element.IP_Hostname}} </div>\\n          </mat-cell>\\n        </ng-container> \\n        <ng-container matColumnDef=\\\"Device_Conn_Type\\\">\\n            <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n              Conn Type </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let element\\\">\\n              <div>{{element.Device_Conn_Type}} </div>\\n            </mat-cell>\\n          </ng-container> \\n        <ng-container matColumnDef=\\\"Ping_log\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Ping Log </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let element\\\">\\n            <a (click)=\\\"download(element.Ping_log)\\\"style=\\\"color:green; cursor: pointer;\\\">\\n              <mat-icon class=\\\"toolbar-icon\\\">cloud_download</mat-icon>\\n            </a>\\n          </mat-cell>\\n        </ng-container>\\n        <ng-container matColumnDef=\\\"PreDeploy_log\\\">\\n            <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Pre Deployment Log </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let element\\\">\\n              <a (click)=\\\"download(element.PreDeploy_log)\\\"style=\\\"color:green; cursor: pointer;\\\">\\n                <mat-icon class=\\\"toolbar-icon\\\">cloud_download</mat-icon>\\n              </a>\\n            </mat-cell>\\n          </ng-container>         \\n          \\n            <ng-container matColumnDef=\\\"Deploy_log\\\">\\n                <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Deployment Log </mat-header-cell>\\n                <mat-cell *matCellDef=\\\"let element\\\">\\n                  <a (click)=\\\"download(element.Deploy_log)\\\"style=\\\"color:green; cursor: pointer;\\\">\\n                    <mat-icon class=\\\"toolbar-icon\\\">cloud_download</mat-icon>\\n                  </a>\\n                </mat-cell>\\n              </ng-container>\\n        <mat-header-row *matHeaderRowDef=\\\"['ID','Netauto_Module', 'OEM', 'Executed_Date', 'Executed_By','IP_Hostname','Device_Conn_Type','Ping_log','PreDeploy_log','Deploy_log']\\\"></mat-header-row>\\n        <div class=\\\"table-rows\\\">\\n          <mat-row *matRowDef=\\\"let row; columns: ['ID','Netauto_Module', 'OEM', 'Executed_Date', 'Executed_By','IP_Hostname','Device_Conn_Type','Ping_log','PreDeploy_log','Deploy_log']\\\"></mat-row>\\n        </div>\\n      </mat-table>\\n    </mat-card>\\n  </div>\"","module.exports = \".mat-column-id {\\n  flex: 0%; }\\n\\n.mat-column-name {\\n  flex: 20%; }\\n\\n.mat-column-createdDate {\\n  flex: 5%; }\\n\\n.mat-column-ip {\\n  flex: 5%; }\\n\\n.mat-column-status {\\n  flex: 0%; }\\n\\n.mat-column-download {\\n  flex: 0%;\\n  justify-content: center; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yZXBvcnQtdWYvRDpcXDIwMjFcXG5ldHdvcmtfYXV0b21hdGlvblxcVVgvc3JjXFxhcHBcXGNvbXBvbmVudHNcXHJlcG9ydC11ZlxccmVwb3J0LXVmLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksU0FBUSxFQUNYOztBQUNEO0VBQ0ksVUFBUyxFQUNaOztBQUNEO0VBQ0ksU0FBUSxFQUNYOztBQUNEO0VBQ0ksU0FBUSxFQUNYOztBQUNEO0VBQ0ksU0FBUSxFQUNYOztBQUNEO0VBQ0ksU0FBUTtFQUNSLHdCQUF1QixFQUMxQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVwb3J0LXVmL3JlcG9ydC11Zi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tYXQtY29sdW1uLWlkIHtcbiAgICBmbGV4OiAwJTtcbn1cbi5tYXQtY29sdW1uLW5hbWUge1xuICAgIGZsZXg6IDIwJTtcbn1cbi5tYXQtY29sdW1uLWNyZWF0ZWREYXRlIHtcbiAgICBmbGV4OiA1JTtcbn1cbi5tYXQtY29sdW1uLWlwIHtcbiAgICBmbGV4OiA1JTtcbn1cbi5tYXQtY29sdW1uLXN0YXR1cyB7XG4gICAgZmxleDogMCU7XG59XG4ubWF0LWNvbHVtbi1kb3dubG9hZCB7XG4gICAgZmxleDogMCU7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59Il19 */\"","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\nimport { MatDialogComponent } from './../mat-dialog/mat-dialog.component';\nimport { DataService } from './../../services/data.service';\n\n@Component({\n  selector: 'app-report-uf',\n  templateUrl: './report-uf.component.html',\n  styleUrls: ['./report-uf.component.scss']\n})\nexport class ReportUfComponent implements OnInit {\n\n  report=[];\n  \n\n  constructor(private http: HttpClient,public dialog: MatDialog, private dataService: DataService) {}\n\n  ngOnInit() {\n    this.refreshbutton()   \n  }\n  public refreshbutton() {\n    this.http.get(\"http://127.0.0.1:5000/api/report_uf\")\n    .subscribe((data:any) => {  \n      this.report = data;\n      \n    });\n    \n  }\n   refreshReport() {\n    return new MatTableDataSource<any>(this.report);\n  }\n\n  openModal(element) {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.autoFocus = true;\n    dialogConfig.width = '1000px';\n    // dialogConfig.maxHeight = '650px';\n    dialogConfig.data = {\n      id: 1,\n      title: 'Report',\n      data: element\n    };\n    const dialogRef = this.dialog.open(MatDialogComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe(result => {\n      console.log(result);\n    });\n  }\n\n  download(text) {\n  const data = new Blob([text], {type: 'text/plain'});\n  const url = window.URL.createObjectURL(data);\n\n  const a = document.createElement('a');\n  document.body.appendChild(a);\n  a.href = url;\n  a.download = \"report.csv\";\n  a.click();\n  setTimeout(() => {\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  }, 0)  }\n  \n}\n\n","module.exports = \"<div><button mat-raised-button class=\\\"button-row\\\" (click)=\\\"refreshbutton()\\\" type=\\\"reset\\\" >\\n  Refresh\\n</button></div>\\n<div style=\\\"margin:5px\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"5px\\\" fxLayoutAlign=\\\"center stretch\\\">\\n  \\n  <div *ngIf=\\\"report.length == 0\\\" class=\\\"header-primary-text\\\">No reports present</div>\\n  <mat-card fxFlex=\\\"100\\\" *ngIf=\\\"report.length != 0\\\">\\n    <mat-table #table [dataSource]=\\\"refreshReport()\\\" matSort>\\n      <ng-container matColumnDef=\\\"ID\\\">\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">Transaction id\\n        </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">\\n          {{element.ID}}\\n        </mat-cell>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"Netauto_Module\\\">\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Module \\n        </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">\\n          <a (click)=\\\"openModal(element)\\\" style=\\\"cursor:pointer;\\\">{{element.Netauto_Module}}</a>\\n        </mat-cell>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"OEM\\\">\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n         OEM </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">\\n          <div>{{element.OEM}} </div>\\n        </mat-cell>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"Executed_Date\\\">\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n          Executed Date </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">\\n          <div>{{element.Executed_Date}} </div>\\n        </mat-cell>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"Executed_By\\\">\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n          Executed By </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">\\n          <div>{{element.Executed_By}} </div>\\n        </mat-cell>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"IP_Hostname\\\">\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n          IP/HOst name </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">\\n          <div>{{element.IP_Hostname}} </div>\\n        </mat-cell>\\n      </ng-container> \\n      <ng-container matColumnDef=\\\"Device_Conn_Type\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n            Conn Type </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let element\\\">\\n            <div>{{element.Device_Conn_Type}} </div>\\n          </mat-cell>\\n        </ng-container> \\n      <ng-container matColumnDef=\\\"Run_log\\\">\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Download Log </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let element\\\">\\n          <a (click)=\\\"download(element.Run_log)\\\"style=\\\"color:green; cursor: pointer;\\\">\\n            <mat-icon class=\\\"toolbar-icon\\\">cloud_download</mat-icon>\\n          </a>\\n        </mat-cell>\\n      </ng-container>\\n\\n      <mat-header-row *matHeaderRowDef=\\\"['ID','Netauto_Module', 'OEM', 'Executed_Date', 'Executed_By','IP_Hostname','Device_Conn_Type','Run_log']\\\"></mat-header-row>\\n      <div class=\\\"table-rows\\\">\\n        <mat-row *matRowDef=\\\"let row; columns: ['ID','Netauto_Module', 'OEM', 'Executed_Date', 'Executed_By','IP_Hostname','Device_Conn_Type','Run_log']\\\"></mat-row>\\n      </div>\\n    </mat-table>\\n  </mat-card>\\n</div>\"","module.exports = \".mat-column-id {\\n  flex: 0%; }\\n\\n.mat-column-name {\\n  flex: 20%; }\\n\\n.mat-column-createdDate {\\n  flex: 5%; }\\n\\n.mat-column-ip {\\n  flex: 5%; }\\n\\n.mat-column-status {\\n  flex: 0%; }\\n\\n.mat-column-download {\\n  flex: 0%;\\n  justify-content: center; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yZXBvcnQvRDpcXDIwMjFcXG5ldHdvcmtfYXV0b21hdGlvblxcVVgvc3JjXFxhcHBcXGNvbXBvbmVudHNcXHJlcG9ydFxccmVwb3J0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksU0FBUSxFQUNYOztBQUNEO0VBQ0ksVUFBUyxFQUNaOztBQUNEO0VBQ0ksU0FBUSxFQUNYOztBQUNEO0VBQ0ksU0FBUSxFQUNYOztBQUNEO0VBQ0ksU0FBUSxFQUNYOztBQUNEO0VBQ0ksU0FBUTtFQUNSLHdCQUF1QixFQUMxQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVwb3J0L3JlcG9ydC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tYXQtY29sdW1uLWlkIHtcbiAgICBmbGV4OiAwJTtcbn1cbi5tYXQtY29sdW1uLW5hbWUge1xuICAgIGZsZXg6IDIwJTtcbn1cbi5tYXQtY29sdW1uLWNyZWF0ZWREYXRlIHtcbiAgICBmbGV4OiA1JTtcbn1cbi5tYXQtY29sdW1uLWlwIHtcbiAgICBmbGV4OiA1JTtcbn1cbi5tYXQtY29sdW1uLXN0YXR1cyB7XG4gICAgZmxleDogMCU7XG59XG4ubWF0LWNvbHVtbi1kb3dubG9hZCB7XG4gICAgZmxleDogMCU7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59Il19 */\"","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\nimport { MatDialogComponent } from './../mat-dialog/mat-dialog.component';\nimport { DataService } from './../../services/data.service';\n\n\n@Component({\n  selector: 'app-report',\n  templateUrl: './report.component.html',\n  styleUrls: ['./report.component.scss']\n})\nexport class ReportComponent implements OnInit {\n\n  report=[];\n  \n\n  constructor(private http: HttpClient,public dialog: MatDialog, private dataService: DataService) {}\n\n  ngOnInit() {\n    this.refreshbutton()   \n  }\n  public refreshbutton() {\n    //this.http.get(\"http://172.16.100.12/api/report\")\n    this.http.get(\"http://127.0.0.1:5000/api/report\")\n    .subscribe((data:any) => {  \n      this.report = data;\n      \n    });\n    \n  }\n   refreshReport() {\n    return new MatTableDataSource<any>(this.report);\n  }\n\n  openModal(element) {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.autoFocus = true;\n    dialogConfig.width = '1000px';\n    // dialogConfig.maxHeight = '650px';\n    dialogConfig.data = {\n      id: 1,\n      title: 'Report',\n      data: element\n    };\n    const dialogRef = this.dialog.open(MatDialogComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe(result => {\n      console.log(result);\n    });\n  }\n\n  download(text) {\n  const data = new Blob([text], {type: 'text/plain'});\n  const url = window.URL.createObjectURL(data);\n\n  const a = document.createElement('a');\n  document.body.appendChild(a);\n  a.href = url;\n  a.download = \"report.csv\";\n  a.click();\n  setTimeout(() => {\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  }, 0)  }\n  \n}\n","module.exports = \"<div\\n  style=\\\"margin:5px\\\"\\n  fxLayout=\\\"row\\\"\\n  fxLayoutGap=\\\"5px\\\"\\n  fxLayoutAlign=\\\"center stretch\\\"\\n>\\n<mat-card fxFlex=\\\"20\\\">\\n    <mat-card-title>IPs/Hostnames</mat-card-title>\\n    <mat-form-field style=\\\"width:100%;height:100%\\\" appearance=\\\"outline\\\">\\n      <textarea matInput rows=\\\"20\\\">\\n          199.228.243.17\\n          172.20.7.36\\n          172.21.2.5\\n          172.16.100.12\\n          172.21.82.97\\n          172.16.151.106\\n          172.16.100.243\\n          40.121.38.118\\n      </textarea>\\n    </mat-form-field>\\n  </mat-card>\\n\\n \\n  <mat-card fxFlex=\\\"20\\\">   \\n    <div> \\n        <mat-radio-group layout=\\\"row\\\" >\\n            <mat-radio-button  value=\\\"1\\\">TCP</mat-radio-button>\\n            <mat-radio-button style=\\\"margin: 10px;\\\" value=\\\"2\\\">UDP</mat-radio-button>\\n          </mat-radio-group>\\n    </div> \\n    <div>\\n   \\n        <mat-form-field>\\n            <input matInput  placeholder=\\\"Port Number\\\" value=\\\"443,1443\\\" />\\n          </mat-form-field>\\n   \\n    </div>\\n    </mat-card>\\n    <mat-card fxFlex=\\\"60\\\">  \\n     \\n      <button  mat-raised-button color=\\\"primary\\\" (click)=\\\"onclick()\\\">Scan</button>\\n\\n      \\n      <mat-form-field style=\\\"width:100%;height:100%\\\" appearance=\\\"outline\\\">\\n          <textarea matInput rows=\\\"20\\\" [(ngModel)]=\\\"scanStatus\\\">\\n            </textarea>  \\n          </mat-form-field>\\n\\n    </mat-card>\\n   \\n    \\n     \\n   \\n    \\n</div>\\n\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdGNwLXBvcnQtc2Nhbm5lci90Y3AtcG9ydC1zY2FubmVyLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-tcp-port-scanner',\n  templateUrl: './tcp-port-scanner.component.html',\n  styleUrls: ['./tcp-port-scanner.component.scss']\n})\nexport class TcpPortScannerComponent implements OnInit {\n  scanStatus=\"\"\n  constructor() { }\n\n  ngOnInit() {\n  }\n  onclick() {\n    this.scanStatus = `Scanned successfully see the output below\n  199.228.243.17 -- 443 -- open\n  199.228.243.17 -- 1443 -- open\n  172.20.7.36 -- 443 -- open\n  172.20.7.36 -- 1443 -- not open\n  172.21.2.5 -- 443 -- open\n  172.21.2.5 -- 1443 -- not open\n  172.16.100.12 -- 443 -- open\n  172.16.100.12 -- 1443 -- not open\n  172.21.82.97 -- 443 -- open\n  172.21.82.97 -- 1443 -- not open\n  172.16.151.106 -- 443 -- open\n  172.16.151.106 -- 1443 -- not open\n  172.16.100.243 -- 443 -- open\n  172.16.100.243 -- 1443 -- not open\n  40.121.38.118 -- 443 -- open\n  40.121.38.118 -- 1443 -- not open\n`\n  }\n}\n","module.exports = \"<form [formGroup]=\\\"upgradeFirmwareForm\\\">\\n  <div style=\\\"margin:5px\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"5px\\\" fxLayoutAlign=\\\"center stretch\\\">\\n\\n    <mat-card fxFlex=\\\"50\\\" fxLayout=\\\"column\\\">\\n      <mat-card-title>Target Device</mat-card-title>\\n      <div class=\\\"form-container\\\">\\n        <div class=\\\"form-padding\\\" fxLayoutGap=\\\"10px\\\">\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"form-field-height\\\" fxFlex=\\\"35\\\">\\n            <mat-label>Device Type</mat-label>\\n            <mat-select placeholder=\\\"Device Type\\\" [(ngModel)]=\\\"deviceType\\\" formControlName=\\\"deviceType\\\">\\n              <mat-option value=\\\"Router\\\">Router</mat-option>\\n              <mat-option value=\\\"Swithces\\\">Swithces</mat-option>\\n            </mat-select>\\n            <mat-error *ngIf=\\\"upgradeFirmwareForm.controls['deviceType'].hasError('required')\\\">Device Type is required\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"form-field-height\\\" fxFlex=\\\"35\\\">\\n            <mat-label>Techonology provider</mat-label>\\n            <mat-select placeholder=\\\"Provider\\\" [(ngModel)]=\\\"Provider\\\" formControlName=\\\"Provider\\\">\\n              <mat-option value=\\\"Cisco IOS\\\">Cisco IOS </mat-option>\\n              <mat-option value=\\\"Cisco Nexus OS\\\" disabled>Cisco Nexus OS</mat-option>\\n              <mat-option value=\\\"option\\\" disabled>VMware NSX</mat-option>\\n              <mat-option value=\\\"option\\\" disabled>Arista</mat-option>\\n              <mat-option value=\\\"option\\\" disabled>Cumulus </mat-option>\\n              <mat-option value=\\\"option\\\" disabled>Aruba</mat-option>\\n              <mat-option value=\\\"option\\\" disabled>Juniper</mat-option>\\n              <mat-option value=\\\"option\\\" disabled>Enterasys </mat-option>\\n            </mat-select>\\n            <mat-error *ngIf=\\\"upgradeFirmwareForm.controls['Provider'].hasError('required')\\\">Techonology provider is\\n              required</mat-error>\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"form-padding\\\" fxLayoutGap=\\\"10px\\\">\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"form-field-height\\\" fxFlex=\\\"35\\\">\\n            <mat-label>Device Username</mat-label>\\n            <input matInput formControlName=\\\"deviceUserName\\\" [(ngModel)]=\\\"deviceUserName\\\" />\\n            <mat-error *ngIf=\\\"upgradeFirmwareForm.controls['deviceUserName'].hasError('required')\\\">Username is required\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"form-field-height\\\" fxFlex=\\\"35\\\">\\n            <mat-label>Device Password</mat-label>\\n            <input matInput formControlName=\\\"devicePassword\\\" [(ngModel)]=\\\"devicePassword\\\"\\n              [type]=\\\"hide ? 'text' : 'password'\\\">\\n            <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\n            <mat-error *ngIf=\\\"upgradeFirmwareForm.controls['devicePassword'].hasError('required')\\\">Password is required\\n            </mat-error>\\n          </mat-form-field>\\n        </div>\\n        <mat-card-title>IPs/Hostnames</mat-card-title>\\n        <mat-form-field style=\\\"width:75%;height:100%\\\" appearance=\\\"outline\\\" *ngIf=\\\"running == false\\\">\\n          <textarea matInput rows=\\\"15\\\" required [(ngModel)]=\\\"ip\\\" formControlName=\\\"IP_Hostname\\\"></textarea>\\n          <mat-error *ngIf=\\\"upgradeFirmwareForm.controls['IP_Hostname'].hasError('required')\\\">IPs/Hostnames is required\\n          </mat-error>\\n        </mat-form-field>\\n        <mat-table #iptable [dataSource]=\\\"ipDataSource\\\" matSort *ngIf=\\\"running == true\\\">\\n          <ng-container matColumnDef=\\\"ip\\\">\\n            <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n              IP\\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let element\\\">\\n              <div>{{element.ip}} </div>\\n            </mat-cell>\\n          </ng-container>\\n          <ng-container matColumnDef=\\\"existingVersion\\\">\\n            <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Existing Version\\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let element\\\">\\n              <div>{{element.existingVersion}}</div>\\n            </mat-cell>\\n          </ng-container>\\n          <ng-container matColumnDef=\\\"upgradableVersions\\\">\\n            <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Upgradable Version\\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let element\\\">\\n              <mat-form-field  style=\\\"width:85%\\\">\\n                <mat-select placeholder=\\\"Select Version\\\" [(ngModel)]=\\\"element.upgradableVersionsSelected.value\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n                  <mat-option *ngFor=\\\"let version of element.upgradableVersions\\\" [value]=\\\"version.versionName\\\">{{version.versionName}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n            </mat-cell>\\n          </ng-container>\\n          <ng-container matColumnDef=\\\"upgradableVersionsSelected\\\">\\n            <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> \\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let element\\\">\\n              <mat-checkbox [checked]=\\\"element.upgradableVersionsSelected.checked == true\\\" [(ngModel)]=\\\"element.upgradableVersionsSelected.checked\\\" [ngModelOptions]=\\\"{standalone: true}\\\" (click)=\\\"showData()\\\"></mat-checkbox>\\n            </mat-cell>\\n          </ng-container>\\n          <ng-container matColumnDef=\\\"status\\\">\\n            <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Status\\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let element\\\">\\n          <div class=\\\"mat-spinner-text\\\"> P </div>\\n            <mat-progress-spinner [ngClass]=\\\"element.ping\\\" [mode]=\\\"'determinate'\\\" [value]=\\\"100\\\" [diameter]=\\\"30\\\">\\n            </mat-progress-spinner>\\n            <div class=\\\"mat-spinner-text\\\">\\n              <D \\n            </div> \\n            <mat-progress-spinner [ngClass]=\\\"element.preDeployment\\\" [mode]=\\\"'determinate'\\\" [value]=\\\"100\\\" [diameter]=\\\"30\\\"></mat-progress-spinner>\\n            <!-- <mat-progress-spinner [color]=\\\"'warn'\\\" [mode]=\\\"'determinate'\\\" [value]=\\\"100\\\" [diameter]=\\\"30\\\"></mat-progress-spinner> -->\\n            <div class=\\\"mat-spinner-text\\\"> D </div>\\n            <mat-progress-spinner [ngClass]=\\\"element.deployment\\\" [mode]=\\\"'determinate'\\\" [value]=\\\"100\\\" [diameter]=\\\"30\\\">\\n            </mat-progress-spinner>\\n            <div class=\\\"mat-spinner-text\\\"> >D </div>\\n            <mat-progress-spinner [ngClass]=\\\"element.postDeployment\\\" [mode]=\\\"'determinate'\\\" [value]=\\\"100\\\" [diameter]=\\\"30\\\">\\n            </mat-progress-spinner>\\n          </mat-cell>\\n        </ng-container>\\n          <mat-header-row *matHeaderRowDef=\\\"['ip', 'existingVersion', 'upgradableVersions', 'upgradableVersionsSelected', 'status']\\\"></mat-header-row>\\n          <div class=\\\"table-rows\\\">\\n            <mat-row *matRowDef=\\\"let row; columns: ['ip', 'existingVersion', 'upgradableVersions', 'upgradableVersionsSelected', 'status']\\\"></mat-row>\\n          </div>\\n        </mat-table>\\n        <!-- <mat-list *ngIf=\\\"running == true\\\">\\n          <mat-list-item *ngFor=\\\"let ipaddress of ipAddresses; let i = index\\\" typeahead-wait-ms=\\\"1000\\\">\\n            <h4 mat-line>{{ ipaddress }}</h4> -->\\n            <!-- <mat-progress-spinner \\n            [color]=\\\"executionOutput[ipaddress]?.error?'warn':'primary'\\\" \\n            [mode]=\\\"executionOutput[ipaddress]?.progress==100?'determinate':'indeterminate'\\\" \\n            [value]=\\\"100\\\" \\n            [diameter]=\\\"20\\\"></mat-progress-spinner> -->\\n            <!-- <div class=\\\"mat-spinner-text\\\"> P </div>\\n            <mat-progress-spinner class=\\\"green\\\" [mode]=\\\"'determinate'\\\" [value]=\\\"100\\\" [diameter]=\\\"30\\\">\\n            </mat-progress-spinner>\\n            <div class=\\\"mat-spinner-text\\\">\\n              <D \\n            </div> \\n            <mat-progress-spinner class=\\\"grey\\\" [mode]=\\\"'determinate'\\\" [value]=\\\"100\\\" [diameter]=\\\"30\\\"></mat-progress-spinner>\\n            <mat-progress-spinner [color]=\\\"'warn'\\\" [mode]=\\\"'determinate'\\\" [value]=\\\"100\\\" [diameter]=\\\"30\\\"></mat-progress-spinner> -->\\n            <!-- <div class=\\\"mat-spinner-text\\\"> D </div>\\n            <mat-progress-spinner class=\\\"grey\\\" [mode]=\\\"'determinate'\\\" [value]=\\\"100\\\" [diameter]=\\\"30\\\">\\n            </mat-progress-spinner>\\n            <div class=\\\"mat-spinner-text\\\"> >D </div>\\n            <mat-progress-spinner class=\\\"grey\\\" [mode]=\\\"'determinate'\\\" [value]=\\\"100\\\" [diameter]=\\\"30\\\">\\n            </mat-progress-spinner>\\n          </mat-list-item>\\n        </mat-list> -->\\n      </div>\\n    </mat-card>\\n\\n\\n    <mat-card fxFlex>\\n      <mat-card-title>Connection</mat-card-title>\\n      <div class=\\\"form-container\\\">\\n        <section class=\\\"section-style\\\">\\n          <mat-radio-group class=\\\"form-padding\\\" formControlName=\\\"deviceConnectionType\\\">\\n            <mat-radio-button class=\\\"radio-margin\\\" value=\\\"telnet\\\" [checked]=\\\"true\\\">Telnet</mat-radio-button>\\n            <mat-radio-button class=\\\"radio-margin\\\" value=\\\"ssh\\\">SSH</mat-radio-button>\\n          </mat-radio-group>\\n        </section>\\n        <section class=\\\"section-style\\\">\\n          <mat-checkbox class=\\\"radio-margin\\\" formControlName=\\\"isJumpserver\\\" matTooltip=\\\"check if jumpserver\\\">Jump server\\n          </mat-checkbox>\\n        </section>\\n\\n        <div *ngIf=\\\"upgradeFirmwareForm.controls['isJumpserver'].value\\\" fxLayout=\\\"column\\\">\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"form-field-height\\\">\\n            <mat-label>Jump Server IP</mat-label>\\n            <input matInput formControlName=\\\"jumpServerIP\\\" [(ngModel)]=\\\"jumpServerIP\\\" />\\n            <mat-error *ngIf=\\\"upgradeFirmwareForm.controls['jumpServerIP'].hasError('required')\\\">Jump server is required\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"form-field-height\\\">\\n            <mat-label>JumpServer Username</mat-label>\\n            <input matInput formControlName=\\\"jumpServerUserName\\\" [(ngModel)]=\\\"jumpServerUserName\\\" />\\n            <mat-error *ngIf=\\\"upgradeFirmwareForm.controls['jumpServerUserName'].hasError('required')\\\">Username is\\n              required</mat-error>\\n          </mat-form-field>\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"form-field-height\\\">\\n            <mat-label>Jump Password</mat-label>\\n            <input matInput formControlName=\\\"jumpServerPassword\\\" [(ngModel)]=\\\"jumpServerPassword\\\"\\n              [type]=\\\"hide ? 'text' : 'password'\\\" />\\n            <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\n            <mat-error *ngIf=\\\"upgradeFirmwareForm.controls['jumpServerPassword'].hasError('required')\\\">Password is\\n              required</mat-error>\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"form-padding\\\">\\n          <mat-form-field appearance=\\\"outline\\\">\\n            <mat-label>Username</mat-label>\\n            <input matInput placeholder=\\\"Username\\\" formControlName=\\\"serverUsername\\\" />\\n            <mat-error *ngIf=\\\"upgradeFirmwareForm.controls['serverUsername'].hasError('required')\\\">Username is required\\n            </mat-error>\\n\\n          </mat-form-field>\\n          <mat-form-field appearance=\\\"outline\\\" style=\\\"margin-left: 10px;\\\">\\n            <mat-label>Password</mat-label>\\n            <input matInput placeholder=\\\"Password\\\" formControlName=\\\"serverPassword\\\"\\n              [type]=\\\"serverPasswordHide ? 'text' : 'password'\\\">\\n            <mat-icon matSuffix (click)=\\\"serverPasswordHide = !serverPasswordHide\\\">{{serverPasswordHide ?\\n                      'visibility' : 'visibility_off'}}</mat-icon>\\n            <mat-error *ngIf=\\\"upgradeFirmwareForm.controls['serverPassword'].hasError('required')\\\">Password is required\\n            </mat-error>\\n\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"form-padding\\\">\\n          <mat-form-field appearance=\\\"outline\\\">\\n            <mat-label>Server IP</mat-label>\\n            <input matInput placeholder=\\\"Server IP\\\" formControlName=\\\"serverIP\\\" />\\n            <mat-error *ngIf=\\\"upgradeFirmwareForm.controls['serverIP'].hasError('required')\\\">Server IP is required\\n            </mat-error>\\n\\n          </mat-form-field>\\n          <!-- <mat-form-field appearance=\\\"outline\\\" style=\\\"margin-left: 10px;\\\">\\n            <mat-label>File Path</mat-label>\\n            <input matInput placeholder=\\\"File Path\\\" formControlName=\\\"serverfilepath\\\" />\\n            <mat-error *ngIf=\\\"upgradeFirmwareForm.controls['serverfilepath'].hasError('required')\\\">Server File Path is\\n              required</mat-error>\\n\\n          </mat-form-field> -->\\n        </div>\\n\\n        <!-- <div class=\\\"form-padding\\\">\\n          <mat-form-field appearance=\\\"outline\\\">\\n            <mat-label>Choose Transfer Protocol</mat-label>\\n            <mat-select placeholder=\\\"protocalSelect\\\" matTooltip=\\\"help content for transfer protocal\\\">\\n              <mat-option value=\\\"option\\\">FTP </mat-option>\\n              <mat-option value=\\\"option\\\" disabled>TFTP</mat-option>\\n              <mat-option value=\\\"option\\\" disabled>SCP</mat-option>\\n              <mat-option value=\\\"option\\\" disabled>SFTP</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div> -->\\n        <div class=\\\"form-padding\\\">\\n          <button mat-raised-button color=\\\"primary\\\" class=\\\"button-row\\\" (click)=\\\"onclick_ping()\\\"\\n           [disabled]=\\\"buttons.pingButton\\\">Ping</button>\\n          <button mat-raised-button color=\\\"primary\\\" class=\\\"button-row\\\" style=\\\"margin-left:5px;\\\"\\n            (click)=\\\"onclick_predeploy()\\\" [disabled]=\\\"buttons.preDeploymentButton\\\">Pre Deployment</button>\\n          <button mat-raised-button color=\\\"primary\\\" class=\\\"button-row\\\" style=\\\"margin-left:5px;\\\"\\n            (click)=\\\"onclick_deploy()\\\" [disabled]=\\\"buttons.deploymentButton\\\">Deployment</button>\\n          <button mat-raised-button color=\\\"primary\\\" class=\\\"button-row\\\" style=\\\"margin-left:5px;\\\"\\n            (click)=\\\"onclick_postdeploy()\\\" [disabled]=\\\"buttons.postDeploymentButtton\\\">Post Deployment</button>\\n          <button mat-raised-button class=\\\"button-row\\\" type=\\\"reset\\\" (click)=\\\"onclickReset()\\\" style=\\\"margin-left:5px;\\\">\\n            Reset\\n          </button>\\n        </div>\\n        <div><span class=\\\"{{status}}\\\">{{upgradeStatus}}</span></div>\\n      </div>\\n      <br/> \\n      <mat-card-title *ngIf=\\\"report.length > 0\\\">Downloads</mat-card-title>\\n      <mat-table #table [dataSource]=\\\"dataSource\\\" matSort *ngIf=\\\"running == true\\\">\\n          <ng-container matColumnDef=\\\"stage\\\">\\n            <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\">\\n              Stage\\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let element\\\">\\n              <div>{{element.stage}} </div>\\n            </mat-cell>\\n          </ng-container>\\n          <ng-container matColumnDef=\\\"download\\\">\\n            <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"header-primary-text\\\"> Download Report\\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let element\\\">\\n              <a (click)=\\\"download()\\\" style=\\\"cursor:pointer;\\\">\\n                <mat-icon class=\\\"toolbar-icon\\\">cloud_download</mat-icon>\\n              </a>\\n            </mat-cell>\\n          </ng-container>\\n          <mat-header-row *matHeaderRowDef=\\\"['stage', 'download']\\\"></mat-header-row>\\n          <div class=\\\"table-rows\\\">\\n            <mat-row *matRowDef=\\\"let row; columns: ['stage', 'download']\\\"></mat-row>\\n          </div>\\n        </mat-table>\\n    </mat-card>\\n  </div>\\n</form>\"","module.exports = \".button-row {\\n  margin-right: 8px; }\\n\\n.section-style {\\n  display: flex;\\n  align-content: center;\\n  align-items: center;\\n  height: 40px; }\\n\\n.radio-margin {\\n  margin: 0 10px; }\\n\\n.form-field-height {\\n  width: 75%; }\\n\\n.green::ng-deep circle {\\n  stroke: green; }\\n\\n.grey::ng-deep circle {\\n  stroke: grey; }\\n\\n.red::ng-deep circle {\\n  stroke: red; }\\n\\n.mat-spinner-text {\\n  position: relative;\\n  left: 19px;\\n  font-size: 12px; }\\n\\n.mat-column-ip {\\n  flex: 2; }\\n\\n.mat-column-existingVersion {\\n  flex: 2; }\\n\\n.mat-column-upgradableVersions {\\n  flex: 2; }\\n\\n.mat-column-upgradableVersionsSelected {\\n  flex: 1; }\\n\\n.mat-column-status {\\n  flex: 2; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy91cGdyYWRlLWZpcm13YXJlL0Q6XFwyMDIxXFxuZXR3b3JrX2F1dG9tYXRpb25cXFVYL3NyY1xcYXBwXFxjb21wb25lbnRzXFx1cGdyYWRlLWZpcm13YXJlXFx1cGdyYWRlLWZpcm13YXJlLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQVksa0JBQWtCLEVBQUU7O0FBRWhDO0VBQ0UsY0FBYTtFQUNiLHNCQUFxQjtFQUNyQixvQkFBbUI7RUFDbkIsYUFBWSxFQUNiOztBQUVEO0VBQ0UsZUFBYyxFQUNmOztBQUVEO0VBQ0UsV0FBVSxFQUNYOztBQUVEO0VBQ0UsY0FBYSxFQUNkOztBQUVEO0VBQ0UsYUFBWSxFQUNiOztBQUVEO0VBQ0UsWUFBVyxFQUNaOztBQUVEO0VBQ0UsbUJBQWlCO0VBQ2pCLFdBQVU7RUFDVixnQkFBZSxFQUNoQjs7QUFFRDtFQUNFLFFBQU8sRUFDUjs7QUFFRDtFQUNFLFFBQU8sRUFDUjs7QUFFRDtFQUNFLFFBQU8sRUFDUjs7QUFFRDtFQUNFLFFBQU8sRUFDUjs7QUFFRDtFQUNFLFFBQU8sRUFDUiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXBncmFkZS1maXJtd2FyZS91cGdyYWRlLWZpcm13YXJlLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmJ1dHRvbi1yb3d7bWFyZ2luLXJpZ2h0OiA4cHggfVxuXG4uc2VjdGlvbi1zdHlsZSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgaGVpZ2h0OiA0MHB4O1xufVxuXG4ucmFkaW8tbWFyZ2luIHtcbiAgbWFyZ2luOiAwIDEwcHg7XG59XG5cbi5mb3JtLWZpZWxkLWhlaWdodCB7XG4gIHdpZHRoOiA3NSU7XG59XG5cbi5ncmVlbjo6bmctZGVlcCBjaXJjbGUge1xuICBzdHJva2U6IGdyZWVuO1xufVxuXG4uZ3JleTo6bmctZGVlcCBjaXJjbGUge1xuICBzdHJva2U6IGdyZXk7XG59XG5cbi5yZWQ6Om5nLWRlZXAgY2lyY2xlIHtcbiAgc3Ryb2tlOiByZWQ7XG59XG5cbi5tYXQtc3Bpbm5lci10ZXh0IHtcbiAgcG9zaXRpb246cmVsYXRpdmU7IFxuICBsZWZ0OiAxOXB4OyBcbiAgZm9udC1zaXplOiAxMnB4O1xufVxuXG4ubWF0LWNvbHVtbi1pcCB7XG4gIGZsZXg6IDI7XG59XG5cbi5tYXQtY29sdW1uLWV4aXN0aW5nVmVyc2lvbiB7XG4gIGZsZXg6IDI7XG59XG5cbi5tYXQtY29sdW1uLXVwZ3JhZGFibGVWZXJzaW9ucyB7XG4gIGZsZXg6IDI7XG59XG5cbi5tYXQtY29sdW1uLXVwZ3JhZGFibGVWZXJzaW9uc1NlbGVjdGVkIHtcbiAgZmxleDogMTtcbn1cblxuLm1hdC1jb2x1bW4tc3RhdHVzIHtcbiAgZmxleDogMjtcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { DataService } from './../../services/data.service';\nimport { HttpClient } from '@angular/common/http';\nimport { MatTableDataSource } from '@angular/material';\nimport { element } from '@angular/core/src/render3';\nimport { environment } from './../../../environments/environment';\n\n@Component({\n  selector: 'app-upgrade-firmware',\n  templateUrl: './upgrade-firmware.component.html',\n  styleUrls: ['./upgrade-firmware.component.scss']\n})\nexport class UpgradeFirmwareComponent implements OnInit {\n  baseAPI = environment.baseAPI;\n  runStatus = \"\"\n  progress = 0\n  running = false;\n  status = ''\n  upgradeFirmwareForm: FormGroup;\n  executionOutput = [];\n  ip = ''\n  ipAddresses = [\n    \"199.228.243.17\",\n    \"172.20.7.36\",\n    \"172.21.2.5\",\n    \"172.16.100.12\",\n    \"172.21.82.97\",\n    \"172.16.151.106\",\n    \"172.16.100.243\"\n  ]\n  command = ''\n  commands = []\n  jumpServerIP = \"192.168.198.80\"\n  jumpServerUserName = \"kneel\"\n  jumpServerPassword = \"kneel\"\n  Provider = \"Cisco IOS\"\n  deviceUserName = \"test\"\n  devicePassword = \"test\"\n  deviceType = \"Router\"\n  dataSource: MatTableDataSource<any>;\n  ipDataSource: MatTableDataSource<any>;\n  report = [];\n  btn_action = \"\"\n  action = \"\"\n  buttons = {\n    pingButton: false,\n    preDeploymentButton: true,\n    deploymentButton: true,\n    postDeploymentButtton: true\n  }\n  hide: any;\n  serverPasswordHide: any;\n  upgradeStatus: any;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder, private dataService: DataService) { }\n\n  ngOnInit() {\n    this.dataSource = new MatTableDataSource<any>(this.report);\n    this.upgradeFirmwareForm = this.formBuilder.group({\n      IP_Hostname: ['', [Validators.required]],\n      jumpServerIP: [''],\n      jumpServerUserName: [''],\n      jumpServerPassword: [''],\n      deviceType: ['', [Validators.required]],\n      deviceUserName: ['', [Validators.required, Validators.maxLength(200)]],\n      devicePassword: ['', [Validators.required, Validators.maxLength(200)]],\n      Provider: ['', [Validators.required]],\n      deviceConnectionType: ['telnet'],\n      isJumpserver: [false],\n      serverUsername: ['', [Validators.required, Validators.maxLength(200)]],\n      serverPassword: ['', [Validators.required, Validators.maxLength(200)]],\n      serverIP: ['', [Validators.required, Validators.maxLength(200)]],\n      // serverfilepath: ['', [Validators.required, Validators.maxLength(200)]],\n      // protocalSelect: ['', []],\n    });\n    var nextLine = '\\n';\n    this.ipAddresses.forEach((element, index) => {\n      this.ip = this.ip + element + nextLine;\n      if (index == this.ipAddresses.length - 2) {\n        nextLine = '';\n      }\n    })\n  }\n\n  /*onclick() {\n    this.ipAddresses = this.ip.split(/\\n/);\n    var finalIp = [];\n    this.ipAddresses.forEach((element) => {\n      if (element != '') {\n        finalIp.push(element);\n      }\n    });\n    this.ipAddresses = finalIp;\n    this.commands = this.command.split(/\\n/);\n    var finalCommand = [];\n    this.commands.forEach((element) => {\n      if (element != '') {\n        finalCommand.push(element);\n      }\n    });\n    this.commands = finalCommand;\n    if (this.upgradeFirmwareForm.invalid) {\n      console.log(this.upgradeFirmwareForm)\n      return;\n    }\n\n    let input = {\n      \"jmpServerIp\": this.jumpServerIP,\n      \"jmpServerUsername\": this.jumpServerUserName,\n      \"jmpServerPassword\": this.jumpServerPassword,\n      \"OEM\": this.Provider,\n      \"deviceUsername\": this.deviceUserName,\n      \"devicePassword\": this.devicePassword,\n      \"deviceAddresses\": this.ipAddresses,\n      \"commands\": this.commands,\n      \"deviceConnectionType\": this.upgradeFirmwareForm.controls['deviceConnectionType'].value,\n      \"isJumpserver\": this.upgradeFirmwareForm.controls['isJumpserver'].value,\n      \"action\": this.btn_action\n    }\n    this.running = true\n    this.executionOutput = []\n    this.http.post(this.baseAPI + \"api/upgrade-firmware\", input)\n      .subscribe((data: any) => {\n        // this.running = false\n        this.executionOutput = data;\n        this.status = \"Success\";\n        this.runStatus = \"Executed Successfully\"\n      });\n    this.running = true\n    this.progress = 100\n    this.runStatus = \"\";\n  }*/\n\n  onclick_ping() {\n    this.btn_action = \"Ping\"\n    this.ipAddresses = this.ip.split(/\\n/);\n    var finalIp = [];\n    this.ipAddresses.forEach((element) => {\n      if (element != '') {\n        finalIp.push(element);\n      }\n    });\n    this.ipAddresses = finalIp;\n    this.commands = this.command.split(/\\n/);\n    var finalCommand = [];\n    this.commands.forEach((element) => {\n      if (element != '') {\n        finalCommand.push(element);\n      }\n    });\n    this.commands = finalCommand;\n    if (this.upgradeFirmwareForm.invalid) {\n      // console.log(this.upgradeFirmwareForm)\n      return;\n    }\n    this.running = true;\n    this.report.push({\n      stage: \"Ping\",\n      disabled: false\n    });\n    this.dataSource = new MatTableDataSource<any>(this.report);\n\n    /*\n    let input = {\n      \"jmpServerIp\": this.jumpServerIP,\n      \"jmpServerUsername\": this.jumpServerUserName,\n      \"jmpServerPassword\": this.jumpServerPassword,\n      \"OEM\": this.Provider,\n      \"deviceUsername\": this.deviceUserName,\n      \"devicePassword\": this.devicePassword,\n      \"deviceAddresses\": this.ipAddresses,\n      \"commands\": this.commands,\n      \"deviceConnectionType\": this.upgradeFirmwareForm.controls['deviceConnectionType'].value,\n      \"isJumpserver\": this.upgradeFirmwareForm.controls['isJumpserver'].value,\n      \"action\": this.btn_action\n    }\n    this.running = true\n    this.executionOutput = []\n    this.http.post(this.baseAPI + \"api/upgrade-firmware\", input)\n      .subscribe((data: any) => {\n        // this.running = false\n        this.executionOutput = data;\n        this.status = \"Success\";\n        this.runStatus = \"Executed Successfully\"\n      });\n    this.progress = 100\n    this.runStatus = \"\";*/\n\n    this.ipAddresses.forEach((element, index) => {\n      var ping = 'green';\n      if (index == 2) {\n        ping = 'red';\n      }\n      this.executionOutput.push(\n        {\n          ip: element,\n          ping: ping,\n          preDeployment: 'grey',\n          deployment: 'grey',\n          postDeployment: 'grey',\n          existingVersion: 'Version 1.0',\n          upgradableVersions: [\n            {\n              versionName: 'Version 1.1'\n            }, {\n              versionName: 'Version 1.2'\n            }, {\n              versionName: 'Version 1.3'\n            }\n          ],\n          upgradableVersionsSelected: {\n            value: \"\",\n            checked: false\n          }\n        }\n      )\n    });\n\n    this.ipDataSource = new MatTableDataSource<any>(this.executionOutput);\n    this.buttons.preDeploymentButton = false;\n  }\n\n  onclick_predeploy() {\n    this.btn_action = \"PreDeployment\"\n    if (this.upgradeFirmwareForm.invalid) {\n      // console.log(this.upgradeFirmwareForm)\n      return;\n    }\n    this.report.push({\n      stage: \"Pre Deployment\"\n    });\n    this.dataSource = new MatTableDataSource<any>(this.report);\n    this.executionOutput.forEach((element, index) => {\n      if (element.ping == 'green') {\n        element.preDeployment = 'green';\n      }\n      if (index == 3) {\n        element.preDeployment = 'red';\n      }\n    });\n    this.buttons.deploymentButton = false;\n  }\n\n  onclick_deploy() {\n    this.btn_action = \"Deployment\"\n    if (this.upgradeFirmwareForm.invalid) {\n      // console.log(this.upgradeFirmwareForm)\n      return;\n    }\n    this.report.push({\n      stage: \"Deployment\"\n    });\n    this.dataSource = new MatTableDataSource<any>(this.report);\n    this.executionOutput.forEach((element, index) => {\n      if (element.preDeployment == 'green') {\n        element.deployment = 'green';\n      }\n      if (index == 1) {\n        element.deployment = 'red';\n      }\n    });\n    this.buttons.postDeploymentButtton = false;\n  }\n\n  onclick_postdeploy() {\n    this.btn_action = \"PostDeployment\"\n    if (this.upgradeFirmwareForm.invalid) {\n      // console.log(this.upgradeFirmwareForm)\n      return;\n    }\n    this.report.push({\n      stage: \"Post Deployment\"\n    });\n    this.dataSource = new MatTableDataSource<any>(this.report);\n    this.executionOutput.forEach((element, index) => {\n      if (element.deployment == 'green') {\n        element.postDeployment = 'green';\n      }\n      if (index == 4) {\n        element.postDeployment = 'red';\n      }\n    });\n    // this.runStatus = \"Executed Successfully\" ;\n  }\n\n  onclickReset() {\n    this.running = false;\n    this.report = [];\n  }\n\n  showData() {\n    console.log(this.executionOutput);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  report = [];\n  \n  constructor() { }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  baseAPI: 'http://172.16.100.12/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}